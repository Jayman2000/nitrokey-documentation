# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-29 01:09+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../storage/factory-reset.rst:2
#: ../storage/factory-reset.rst:2
#: ../storage/factory-reset.rst:2
#: ../storage/factory-reset.rst:2
msgid "Factory Reset"
msgstr ""

#: ../storage/factory-reset.rst:8
#: ../storage/factory-reset.rst:8
#: ../storage/factory-reset.rst:8
#: ../storage/factory-reset.rst:8
msgid "There are two types of factory resets for Nitrokey Storage devices:"
msgstr ""

#: ../storage/factory-reset.rst:10
#: ../storage/factory-reset.rst:10
#: ../storage/factory-reset.rst:10
#: ../storage/factory-reset.rst:10
msgid "a factory reset of the OpenPGP smart card, for example using ``gpg --card-edit`` and then ``factory-reset``, or"
msgstr ""

#: ../storage/factory-reset.rst:12
#: ../storage/factory-reset.rst:12
#: ../storage/factory-reset.rst:12
#: ../storage/factory-reset.rst:12
msgid "a factory reset of the entire Nitrokey device, for example using Nitrokey App."
msgstr ""

#: ../storage/factory-reset.rst:15
#: ../storage/factory-reset.rst:15
#: ../storage/factory-reset.rst:15
#: ../storage/factory-reset.rst:15
msgid "Also, it is possible to generate a new AES key that is used to encrypt the Password Safe and the Encrypted Volume without performing a factory reset."
msgstr ""

#: ../storage/factory-reset.rst:20
#: ../storage/factory-reset.rst:20
#: ../storage/factory-reset.rst:20
#: ../storage/factory-reset.rst:20
msgid "The Nitrokey App always generates a new AES key after performing a factory reset."
msgstr ""

#: ../storage/factory-reset.rst:23
#: ../storage/factory-reset.rst:23
#: ../storage/factory-reset.rst:23
#: ../storage/factory-reset.rst:23
msgid "The following table describes the differences between these three operations:"
msgstr ""

#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
msgid "Property"
msgstr ""

#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
msgid "OpenPGP factory reset"
msgstr ""

#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
msgid "Nitrokey factory reset"
msgstr ""

#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
#: ../storage/factory-reset.rst:26
msgid "Generate AES key"
msgstr ""

#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:28
msgid "Requires admin PIN"
msgstr ""

#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:31
msgid "no"
msgstr ""

#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:31
msgid "yes"
msgstr ""

#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:29
#: ../storage/factory-reset.rst:29
msgid "Destroys OpenPGP keys"
msgstr ""

#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:30
msgid "Destroys Password Safe"
msgstr ""

#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:30
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
msgid "yes [1]_"
msgstr ""

#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:31
msgid "Destroys One-Time Passwords"
msgstr ""

#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:31
#: ../storage/factory-reset.rst:31
msgid "yes [2]_"
msgstr ""

#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
#: ../storage/factory-reset.rst:32
msgid "Destroys Encrypted Volume"
msgstr ""

#: ../storage/factory-reset.rst:35
#: ../storage/factory-reset.rst:35
#: ../storage/factory-reset.rst:35
#: ../storage/factory-reset.rst:35
msgid "Clears the encryption key without overwriting the encrypted data."
msgstr ""

#: ../storage/factory-reset.rst:36
#: ../storage/factory-reset.rst:36
#: ../storage/factory-reset.rst:36
#: ../storage/factory-reset.rst:36
msgid "This is expected to change in new Nitrokey Storage firmware versions."
msgstr ""

#: ../storage/firmware-update-manually.rst:2
#: ../storage/firmware-update-manually.rst:2
#: ../storage/firmware-update-manually.rst:2
#: ../storage/firmware-update-manually.rst:2
msgid "Activate Update Mode Manually"
msgstr ""

#: ../storage/firmware-update-manually.rst:10
#: ../storage/firmware-update-manually.rst:10
#: ../storage/firmware-update-manually.rst:10
#: ../storage/firmware-update-manually.rst:10
msgid "The following steps are only necessary if you are using Windows 10 Build 1809 (or higher) and Nitrokey Storage with firmware 0.52 or older. In all other cases, or if you have access to another system, the regular update as described `here <firmware-update.html>`__ is sufficient and easier."
msgstr ""

#: ../storage/firmware-update-manually.rst:13
#: ../storage/firmware-update-manually.rst:13
#: ../storage/firmware-update-manually.rst:13
#: ../storage/firmware-update-manually.rst:13
msgid "What is needed"
msgstr ""

#: ../storage/firmware-update-manually.rst:15
#: ../storage/firmware-update-manually.rst:15
#: ../storage/firmware-update-manually.rst:15
#: ../storage/firmware-update-manually.rst:15
msgid "To put the Nitrokey Storage manually into Update Mode (without using the Nitrokey App), the following is required:"
msgstr ""

#: ../storage/firmware-update-manually.rst:17
#: ../storage/firmware-update-manually.rst:17
#: ../storage/firmware-update-manually.rst:17
#: ../storage/firmware-update-manually.rst:17
msgid "A USB stick (**All data on the USB stick will be lost! Please make a backup of the creation before!**)"
msgstr ""

#: ../storage/firmware-update-manually.rst:20
#: ../storage/firmware-update-manually.rst:20
#: ../storage/firmware-update-manually.rst:20
#: ../storage/firmware-update-manually.rst:20
msgid "The `Balena Etcher <https://www.balena.io/etcher/>`__ software"
msgstr ""

#: ../storage/firmware-update-manually.rst:22
#: ../storage/firmware-update-manually.rst:22
#: ../storage/firmware-update-manually.rst:22
#: ../storage/firmware-update-manually.rst:22
msgid "The `USB Image <https://github.com/Nitrokey/nitrokey-storage-update-boot/releases/latest>`__ we created for this purpose. Please download only the file ending with “.img.zip”."
msgstr ""

#: ../storage/firmware-update-manually.rst:28
#: ../storage/firmware-update-manually.rst:28
#: ../storage/firmware-update-manually.rst:28
#: ../storage/firmware-update-manually.rst:28
msgid "Install Balena Etcher"
msgstr ""

#: ../storage/firmware-update-manually.rst:30
#: ../storage/firmware-update-manually.rst:30
#: ../storage/firmware-update-manually.rst:30
#: ../storage/firmware-update-manually.rst:30
msgid "Balena Etcher helps us to install the USB image on the USB stick. Please double click on the `previously downloaded installation file <https://www.balena.io/etcher/>`__ and follow the instructions."
msgstr ""

#: ../storage/firmware-update-manually.rst:43
#: ../storage/firmware-update-manually.rst:43
#: ../storage/firmware-update-manually.rst:43
#: ../storage/firmware-update-manually.rst:43
msgid "Installing the USB image with Balena Etcher"
msgstr ""

#: ../storage/firmware-update-manually.rst:45
#: ../storage/firmware-update-manually.rst:45
#: ../storage/firmware-update-manually.rst:45
#: ../storage/firmware-update-manually.rst:45
msgid "The program usually opens immediately after installation. If not, you will find a shortcut on the desktop. Using the application, select the `previously downloaded image file <https://github.com/Nitrokey/nitrokey-storage-update-boot/releases>`__, which ends with “.img.zip”. Now insert the USB stick. It should be recognized automatically. Press “Flash!” to proceed."
msgstr ""

#: ../storage/firmware-update-manually.rst:55
#: ../storage/firmware-update-manually.rst:55
#: ../storage/firmware-update-manually.rst:55
#: ../storage/firmware-update-manually.rst:55
msgid "You must allow the application to make changes."
msgstr ""

#: ../storage/firmware-update-manually.rst:67
#: ../storage/firmware-update-manually.rst:67
#: ../storage/firmware-update-manually.rst:67
#: ../storage/firmware-update-manually.rst:67
msgid "After the image has been successfully transferred, Windows may ask if the device should be formatted. It is important that you click “Cancel”, otherwise the USB stick will be overwritten by Windows."
msgstr ""

#: ../storage/firmware-update-manually.rst:75
#: ../storage/firmware-update-manually.rst:75
#: ../storage/firmware-update-manually.rst:75
#: ../storage/firmware-update-manually.rst:75
msgid "Booting from the USB stick"
msgstr ""

#: ../storage/firmware-update-manually.rst:77
#: ../storage/firmware-update-manually.rst:77
#: ../storage/firmware-update-manually.rst:77
#: ../storage/firmware-update-manually.rst:77
msgid "Now the system must be restarted. The USB stick must remain in the USB port so that the system can be started on the USB stick. Some devices are configured to start automatically from USB stick if it contains a system. If Windows instead of the USB image is booting right after the restart, you have to set your BIOS to boot from USB. On many systems this can be done with the Escape key, the F10, F11 or F12 key. Often, when starting the device there is also a hint which key to use the so-called “boot menu”."
msgstr ""

#: ../storage/firmware-update-manually.rst:79
#: ../storage/firmware-update-manually.rst:79
#: ../storage/firmware-update-manually.rst:79
#: ../storage/firmware-update-manually.rst:79
msgid "After the system has started, please choose the language by typing 1 (English) and hit Enter."
msgstr ""

#: ../storage/firmware-update-manually.rst:86
#: ../storage/firmware-update-manually.rst:86
#: ../storage/firmware-update-manually.rst:86
#: ../storage/firmware-update-manually.rst:86
msgid "Please insert the Nitrokey Storage when asked to."
msgstr ""

#: ../storage/firmware-update-manually.rst:93
#: ../storage/firmware-update-manually.rst:93
#: ../storage/firmware-update-manually.rst:93
#: ../storage/firmware-update-manually.rst:93
msgid "The Firmware Update Mode will be started automatically if the standard password is set. Otherwise you need to input your password and hit enter."
msgstr ""

#: ../storage/firmware-update-manually.rst:100
#: ../storage/firmware-update-manually.rst:100
#: ../storage/firmware-update-manually.rst:100
#: ../storage/firmware-update-manually.rst:100
msgid "After the system has activated the firmware update on the Nitrokey Storage, a restart is issued after 60 seconds. Please remove the USB Stick. Afterwards you can use the Nitrokey Update Tool in Windows as described `here <firmware-update.html>`__."
msgstr ""

#: ../storage/firmware-update-manually.rst:103
#: ../storage/firmware-update-manually.rst:103
#: ../storage/firmware-update-manually.rst:103
#: ../storage/firmware-update-manually.rst:103
msgid "Restoring the USB Stick"
msgstr ""

#: ../storage/firmware-update-manually.rst:105
#: ../storage/firmware-update-manually.rst:105
#: ../storage/firmware-update-manually.rst:105
#: ../storage/firmware-update-manually.rst:105
msgid "Windows should automatically ask to format your USB Stick as soon as you insert the USB Stick the first time again in Windows. Just accept the request for being able to use the USB Stick as previously."
msgstr ""

#: ../storage/index.rst:2
msgid "Nitrokey Storage 2"
msgstr ""

#: ../storage/index.rst:6
msgid "Choose your operating system:"
msgstr ""

#: ../pro/2fa-google.rst:2
#: ../pro/2fa-google.rst:2
#: ../pro/2fa-google.rst:2
msgid "Two-factor Authentication for Google"
msgstr ""

#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
#: ../storage/linux/product_platform_heading.rst:3
msgid "(Nitrokey Storage 2 - Linux)"
msgstr ""

#: ../pro/2fa-google.rst:8
#: ../pro/2fa-google.rst:8
#: ../pro/2fa-google.rst:8
msgid "These are the basic steps for registering the Nitrokey Pro or Nitrokey Storage as a second factor of a Google account:"
msgstr ""

#: ../pro/2fa-google.rst:10
#: ../pro/2fa-google.rst:10
#: ../pro/2fa-google.rst:10
msgid "Go to `https://myaccount.google.com/security#signin <https://myaccount.google.com/intro/security>`__"
msgstr ""

#: ../pro/2fa-google.rst:13
#: ../pro/2fa-google.rst:13
#: ../pro/2fa-google.rst:13
msgid "Click “2-Step Verification” on the right side"
msgstr ""

#: ../pro/2fa-google.rst:15
#: ../pro/2fa-google.rst:15
#: ../pro/2fa-google.rst:15
msgid "You need to define a first 2-Step Verfication (e.g. your phone number) method to have access to the alternative second step option (the first 2-Step Verification can’t be the security key)"
msgstr ""

#: ../pro/2fa-google.rst:19
#: ../pro/2fa-google.rst:19
#: ../pro/2fa-google.rst:19
msgid "Choose “Authenticator App” as second step (though you won’t actually need the app)"
msgstr ""

#: ../pro/2fa-google.rst:22
#: ../pro/2fa-google.rst:22
#: ../pro/2fa-google.rst:22
msgid "Choose Android -> press on “Can’t scan it” below the qrcode to see the secret key"
msgstr ""

#: ../pro/2fa-google.rst:25
#: ../pro/2fa-google.rst:25
#: ../pro/2fa-google.rst:25
msgid "Copy the key (you can ignore the whitespaces, they do not get copied anyway!) and paste the key into the corresponding field in the Nitrokey App"
msgstr ""

#: ../pro/2fa-google.rst:29
#: ../pro/2fa-google.rst:29
#: ../pro/2fa-google.rst:29
msgid "Click “Next” and follow the instructions (but you use the Nitrokey App instead of the Google Authenticator app to generate the keys)"
msgstr ""

#: ../pro/2fa-google.rst:32
#: ../pro/2fa-google.rst:32
#: ../pro/2fa-google.rst:32
msgid "It is possible to use the same secret key for the Google Autenticator app and the Nitrokey App as well. Just make sure to follow the above procedure and use the qrcode for the Authenticator app afterwards before clicking “Next”. Now you can use either the Google Authenticator app or the Nitrokey App."
msgstr ""

#: ../pro/2fa-nextcloud.rst:2
#: ../pro/2fa-nextcloud.rst:2
#: ../pro/2fa-nextcloud.rst:2
msgid "Two-factor Authentication for Nextcloud accounts"
msgstr ""

#: ../pro/2fa-nextcloud.rst:8
#: ../pro/2fa-nextcloud.rst:8
#: ../pro/2fa-nextcloud.rst:8
msgid "These are the basic steps for registering the Nitrokey Pro or Nitrokey Storage as a second factor of a Nextcloud account."
msgstr ""

#: ../pro/2fa-nextcloud.rst:10
#: ../pro/2fa-nextcloud.rst:10
#: ../pro/2fa-nextcloud.rst:10
msgid "At first, log in to your Nextcloud account, click on the top right symbol of your account and open the settings menu."
msgstr ""

#: ../pro/2fa-nextcloud.rst:17
#: ../pro/2fa-nextcloud.rst:17
#: ../pro/2fa-nextcloud.rst:17
msgid "Now choose “Security” on the left hand side."
msgstr ""

#: ../pro/2fa-nextcloud.rst:24
#: ../pro/2fa-nextcloud.rst:24
#: ../pro/2fa-nextcloud.rst:24
msgid "Now you can tick the box reading “Enable TOTP”. There is shown the TOTP secret which we need to add to our Nitrokey via the Nitrokey App."
msgstr ""

#: ../pro/2fa-nextcloud.rst:31
#: ../pro/2fa-nextcloud.rst:31
#: ../pro/2fa-nextcloud.rst:31
msgid "Copy and save secret code into the Nitrokey App."
msgstr ""

#: ../pro/2fa-nextcloud.rst:43
#: ../pro/2fa-nextcloud.rst:43
#: ../pro/2fa-nextcloud.rst:43
msgid "Now we request a one-time password for the Nextcloud to verify the process by inserting the password on the website and pressing “verify”."
msgstr ""

#: ../pro/2fa-nextcloud.rst:55
#: ../pro/2fa-nextcloud.rst:55
#: ../pro/2fa-nextcloud.rst:55
msgid "From now on, when signing in you need an OTP additionally to your password. Get one by the Nitrokey App like before and insert it in when logging in."
msgstr ""

#: ../pro/2fa-nextcloud.rst:62
#: ../pro/2fa-nextcloud.rst:62
#: ../pro/2fa-nextcloud.rst:62
msgid "Nextcloud provides you with backup codes, in case you lost your Nitrokey. It is recommended to print out these codes and store them somewhere save otherwise you might not be able to log in to your account anymore!"
msgstr ""

#: ../pro/2fa-odoo.rst:2
#: ../pro/2fa-odoo.rst:2
#: ../pro/2fa-odoo.rst:2
msgid "Two-factor Authentication for ERP Software Odoo"
msgstr ""

#: ../pro/2fa-odoo.rst:8
#: ../pro/2fa-odoo.rst:8
#: ../pro/2fa-odoo.rst:8
msgid "`Odoo <https://www.odoo.com/>`__ is a powerful ERP (Enterprise Resource Planning) software for companies of all sizes. Odoo is available as open source and contains modules for CRM, website, e-commerce, accounting, financial accounting, production, warehouse management, project management, document management, among others."
msgstr ""

#: ../pro/2fa-odoo.rst:10
#: ../pro/2fa-odoo.rst:10
#: ../pro/2fa-odoo.rst:10
msgid "The secure access to such a central software is especially important and can be realized with the Nitrokey. In this case the Nitrokey will be checked during user login in addition to the user password. Phishing attacks are thus foiled and your critical company data is protected."
msgstr ""

#: ../pro/2fa-odoo.rst:13
#: ../pro/2fa-odoo.rst:13
#: ../pro/2fa-odoo.rst:13
msgid "Video: Zwei-Faktor-Authentifizierung mit dem Nitrokey Pro und Nitrokey Storage in Odoo"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:2
msgid "Automatic Screen Lock at Removal"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:8
msgid "This guide will walk you through the configuration of your computer, to automatically lock your session when you remove the Nitrokey."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:10
msgid "The configuration requires the creation of two files under two different directories."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:13
#: ../pro/linux/disk-encryption-luks.rst:26
msgid "Requirements"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:15
msgid "Ubuntu 20.04 or Debian 10 (Buster), both with `Gnome Display Manager <https://wiki.gnome.org/Projects/GDM>`__ installed."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:18
msgid "Nitrokey Pro 2, Nitrokey Storage 2, or Nitrokey HSM 2"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:21
msgid "Configuration"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:24
msgid "Create the ``.rules`` file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:26
msgid "With your favorite text editor create a file called ``85-nitrokey.rules``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:32
msgid "Add the following line to the file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:38
msgid "Save the file and quit the editor."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:40
msgid "This file sets up a new hardware rule that executes the ``gnome-screensaver-lock`` at removal of the Nitrokey device."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:42
msgid "You should change the configuration according to the device you are using as following:"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:44
msgid "Nitrokey Pro: ``ENV{PRODUCT}==\"20a0/4108/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:45
msgid "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:46
msgid "Nitrokey Storage: ``ENV{PRODUCT}==\"20a0/4109/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:49
msgid "Create the ``gnome-screensaver-lock`` script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:51
msgid "With your favorite text editor create a file called ``gnome-screensaver-lock``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:57
msgid "Add the following text"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:67
msgid "In the first step, this script looks for the user-name of the gnome session, i.e. ``user``."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:69
msgid "When it is called at Nitrokey removal, the script queries ``user``, switches to its session, and locks the screen by prompting the screen-saver screen."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:72
msgid "Execute the script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:74
msgid "Once all set up, execute the script once, and it will lock the screen. It does not matter if the Nitrokey is plugged or not for this first execution."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:77
#: ../pro/linux/disk-encryption-luks.rst:140
#: ../pro/linux/hard-disk-encryption.rst:116
#: ../pro/openpgp.rst:49
#: ../pro/smime.rst:57
#: ../pro/smime-thunderbird.rst:45
#: ../pro/openpgp.rst:49
#: ../pro/smime.rst:57
#: ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45
#: ../pro/openpgp.rst:49
#: ../pro/windows/openpgp-outlook.rst:26
#: ../pro/smime.rst:57
#: ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45
msgid "Usage"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:79
msgid "By now you can log back to your session by entering your password, and (re)plug you Nitrokey if you did not do it before."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:81
msgid "The next time(s) you unplug your Nitrokey from the computer, it will automatically lock the screen."
msgstr ""

#: ../pro/change-pins.rst:2
#: ../pro/change-pins.rst:2
#: ../pro/change-pins.rst:2
msgid "Change User and Admin PIN"
msgstr ""

#: ../pro/change-pins.rst:9
#: ../pro/change-pins.rst:9
#: ../pro/change-pins.rst:9
msgid "User PIN"
msgstr ""

#: ../pro/change-pins.rst:11
#: ../pro/change-pins.rst:11
#: ../pro/change-pins.rst:11
msgid "The user PIN is at least 6-digits long and is used to get access to the content of the Nitrokey. This is the PIN you will use a lot in every day use e.g. for decrypting messages, for unlocking your encrypted storage (NK Storage only) etc."
msgstr ""

#: ../pro/change-pins.rst:13
#: ../pro/change-pins.rst:13
#: ../pro/change-pins.rst:13
msgid "You can change the user PIN with the Nitrokey App if using a Nitrokey Pro or Nitrokey Storage. In the `Nitrokey <https://www.nitrokey.com/download>`__ App open ‘Menu -> Configure -> Change User PIN’ to open the dialog to change the PIN."
msgstr ""

#: ../pro/change-pins.rst:21
#: ../pro/change-pins.rst:21
#: ../pro/change-pins.rst:21
msgid "You can change the User PIN in the dialog window now."
msgstr ""

#: ../pro/change-pins.rst:23
#: ../pro/change-pins.rst:23
#: ../pro/change-pins.rst:23
msgid "The user PIN can have up to 20 digits and other characters (e.g. alphabetic and special characters). But as the user PIN is blocked as soon three wrong PIN attempts were done, it is sufficiently secure to only have a 6 digits PIN. The default PIN is 123456."
msgstr ""

#: ../pro/change-pins.rst:31
#: ../pro/change-pins.rst:31
#: ../pro/change-pins.rst:31
msgid "Admin PIN"
msgstr ""

#: ../pro/change-pins.rst:33
#: ../pro/change-pins.rst:33
#: ../pro/change-pins.rst:33
msgid "The admin PIN is at least 8-digits long and is used to change contents/settings of the Nitrokey. That is to say after initializing the Nitrokey you probably won’t need this PIN too often (e.g. if you want to add another password to the password safe of the Nitrokey Pro or Nitrokey Storage)."
msgstr ""

#: ../pro/change-pins.rst:35
#: ../pro/change-pins.rst:35
#: ../pro/change-pins.rst:35
msgid "You can change the admin PIN with the Nitrokey App if using a Nitrokey Pro or Nitrokey Storage. In the `Nitrokey App <https://www.nitrokey.com/download>`__ open ‘Menu -> Configure -> Change Admin PIN’ to open the dialog to change the PIN."
msgstr ""

#: ../pro/change-pins.rst:43
#: ../pro/change-pins.rst:43
#: ../pro/change-pins.rst:43
msgid "You can change the admin PIN in the dialog window now."
msgstr ""

#: ../pro/change-pins.rst:45
#: ../pro/change-pins.rst:45
#: ../pro/change-pins.rst:45
msgid "The admin PIN can have up to 20 digits and other characters (e.g. alphabetic and special characters). But as the admin PIN is blocked as soon three wrong PIN attempts were done, it is sufficiently secure to only have 8 digits PIN. The default PIN is 12345678."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:2
msgid "Full-Disk Encryption With cryptsetup/LUKS"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:8
msgid "This guide shows how to configure LUKS-encrypted volumes, to authenticate at boot with `Nitrokey Pro <https://shop.nitrokey.com/shop/product/nk-pro-2-nitrokey-pro-2-3>`__ or `Nitrokey Storage <https://shop.nitrokey.com/shop/product/nitrokey-storage-2-56>`__."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:10
msgid "To provide some background, cryptsetup-initramfs now has support for using OpenPGP smart cards like the Nitrokey Pro and Nitrokey Storage to unlock LUKS-encrypted volumes. Once you finish the setup, you will just need to insert your Nitrokey at boot and enter your User PIN, instead of typing in your regular disk encryption passphrase."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:16
msgid "These instructions have been tested on Ubuntu 20.04 and Debian 10."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:20
msgid "The following guide can potentially lock you out of your computer. You should be aware of these risks, and we recommend you use the script below on a secondary computer, or after a full backup as you might lose your data."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:28
msgid "An Ubuntu or Debian computer with at least one LUKS-encrypted volume."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:30
msgid "See the section below to determine which method is compatible with this guide."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:32
msgid "A Nitrokey Pro 2 or Nitrokey Storage 2 `initialized <openpgp.html>`__ with keys."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:37
msgid "Known Issues"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:39
msgid "So far, the script works only with manually-partitioned volumes, that are composed of an unencrypted ``/boot`` partition, and an encrypted root ``/`` partition."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:43
msgid "Please do not select the automatic full-disk encryption provided by the operating system you are using for this guide. You will face recurrent errors when the partitioning is done automatically, using the installation interface on Ubuntu and Debian."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:49
msgid "Instructions"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:51
msgid "Install dependencies"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:58
msgid "Create smartcard-luks directory"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:65
msgid "Download the smartcard-luks-script"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:73
msgid "Export the public key"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:75
msgid "To export your public key from GnuPG’s keyring:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:82
msgid "If you already have uploaded a public key to a keyserver (or have it stored somewhere else), you should retrieve it in the way you are most comfortable with, and proceed to step 5."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:86
msgid "Determine and verify the correct LUKS device name for your root-partition:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:94
msgid "Usually this should be something like `nvme0n1p3_crypt` (for NitroPC) or `sda3_crypt` (for NitroPads).  You can and should crosscheck that the UUID referred inside `/etc/crypttab` is the designated partition by checking the symbolic link inside `/dev/disks/by-uuid/`."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:99
msgid "Execute the script with the luks device name (e.g., `nvme0n1p3_crypt`) and `pubkey.asc` as arguments."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:107
msgid "Once, you run the script with the OpenPGP public key as argument, it automatically sets up a new LUKS secret, encrypts it against that public key, and sets up crypttab, LUKS, initramfs, and GRUB."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:111
msgid "First you will be prompted for the ``User PIN``"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:116
msgid "Once you unlock the Nitrokey, you will be prompted for your ``OLD passphrase``. It is the passphrase you entered to encrypt your volume at installation."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:122
msgid "This is a fall-back alternative in case you lose your Nitrokey, or if it’s unavailable. So far, it was not tested, and users must be aware of the risk of getting locked out of their computer, if the fall-back method does not work."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:127
msgid "Once you enter the passphrase, the script finishes the setup in about one minute. Do not interrupt the script, or you might get locked out of your computer after reboot."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:134
msgid "Done!"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:136
msgid "By now you must reboot, and you should be able to use your Nitrokey to unlock your encrypted drive."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:142
msgid "After reboot you should be prompted for your User PIN"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:147
msgid "Enter your User PIN to unlock the drive"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:154
msgid "Further Hints"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:157
msgid "Change Passphrase"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:159
msgid "Once this setup is done, you should not use the (gnome) *disks* utility anymore to change the (fallback) passphrase. The proper way to do this is to call *cryptsetup* directly like this:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:167
msgid "With `nvme0n1p3` being the partition you set up the keys for."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:170
msgid "Use Multiple Keys"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:172
msgid "It is easy to use multiple (hardware) security keys so that each of them is able to unlock the LUKS drive independently. Just export multiple public keys and also *pass multiple keys* to the setup script like this:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:182
msgid "Set Cardholder Name"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:184
msgid "During the PIN entry on boot for decryption of the LUKS root partition a cardholder is presented to the user, to set this please use ``$ gpg --edit-card`` and inside the prompt type ``admin`` and ``name`` to set the cardholder for the OpenPGP Card (Nitrokey Storage 2 or Nitrokey Pro 2)."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:190
msgid "Replace/Delete Keys"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:192
msgid "It is not possible to add/remove keys directly. Therefore you need to delete/remove the old setup and re-run the setup with the designated key(s):"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:196
msgid "Remove the keyfile (path, if you used the script above) from luks-device (*nvme0n1p3*):"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:202
msgid "Remove the keyfile itself:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:208
msgid "Re-run setup above."
msgstr ""

#: ../pro/ecc.rst:2
#: ../pro/ecc.rst:2
#: ../pro/ecc.rst:2
msgid "Elliptic Curves (ECC) Support"
msgstr ""

#: ../pro/ecc.rst:9
#: ../pro/ecc.rst:9
#: ../pro/ecc.rst:9
msgid "RSA-2048 Becomes Increasingly Insecure"
msgstr ""

#: ../pro/ecc.rst:11
#: ../pro/ecc.rst:11
#: ../pro/ecc.rst:11
msgid "For security reasons, the German Federal Office for Information Security (Bundesamt für Sicherheit in der Informationstechnik, BSI) no longer recommends RSA keys with a length of 2048 bit `to be used after 2022 <https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/TechGuidelines/TG02102/BSI-TR-02102-1.pdf?__blob=publicationFile&v=10>`__. This means that longer keys will need to come into use in the foreseeable future. Assuming a usage period of five years, is is already necessary to generate longer keys. However, longer RSA keys with 3072 bit or 4096 bit are significantly slower. For this reason the new Nitrokey Storage 2 and Pro 2 (resp. the integrated OpenPGP Card version 3.3) supports encryption by means of `elliptic-curve cryptography (ECC) <https://en.wikipedia.org/wiki/Elliptic-curve_cryptography>`__. This method is considered to be just as secure with smaller ECC keys as longer RSA keys and is also considerably faster."
msgstr ""

#: ../pro/ecc.rst:16
#: ../pro/ecc.rst:16
#: ../pro/ecc.rst:16
msgid "Basics of Elliptic-Curve Cryptography"
msgstr ""

#: ../pro/ecc.rst:18
#: ../pro/ecc.rst:18
#: ../pro/ecc.rst:18
msgid "In contrast to RSA, there are many different forms (so-called curves) of elliptic-curve cryptography. Notably, the `NSA was involved <https://www.schneier.com/essays/archives/2007/11/did_nsa_put_a_secret.html>`__ in the development of the NIST curves. Even if there is no evidence of back doors in the curves, using a certain curve can pose a question of trust. Fortunately the new Nitrokey Storage 2 and Pro 2 support two kind of curves, namely NIST and Brainpool. In what follows we will use Brainpool curves. `This article <https://arstechnica.com/information-technology/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/>`__ provides a good entry point for gaining a general understanding of elliptic-curve cryptography."
msgstr ""

#: ../pro/ecc.rst:21
#: ../pro/ecc.rst:21
#: ../pro/ecc.rst:21
msgid "System Requirements"
msgstr ""

#: ../pro/ecc.rst:23
#: ../pro/ecc.rst:23
#: ../pro/ecc.rst:23
msgid "In order to create keys based on elliptic curves a Nitrokey Storage 2 / Pro 2 and GnuPG version 2.1.17 or higher are required."
msgstr ""

#: ../pro/ecc.rst:26
#: ../pro/ecc.rst:26
#: ../pro/ecc.rst:26
msgid "You can read Nitrokey’s OpenPGP Card version via ``gpg2 —card-status``:"
msgstr ""

#: ../pro/ecc.rst:36
#: ../pro/ecc.rst:36
#: ../pro/ecc.rst:36
msgid "The ‘Version’ field represents the version of the OpenPGP Card integrated in the Nitrokey — in this case it is 3.3 as needed for Elliptic-curve cryptography. OpenPGP Card version 2.2 doesn’t support ECC."
msgstr ""

#: ../pro/ecc.rst:38
#: ../pro/ecc.rst:38
#: ../pro/ecc.rst:38
msgid "You can learn about the installed version of GnuPG via ``gpg2  --version``. At least version 2.1.16 is required. The newest GnuPG version for Windows can be found `here <https://www.gpg4win.org/>`__ and the newest version for MacOS can be found `here <https://gpgtools.org/>`__. A suitable version of GnuPG is included in the GNU/Linux distributions Ubuntu (since 18.04), Debian (from Stretch onwards), Arch Linux, Fedora (from Release 26 onwards) and openSUSE Tumbleweed. At the end of this articles are instructions how to manually update GnuPG on older Ubuntu versions."
msgstr ""

#: ../pro/ecc.rst:42
#: ../pro/ecc.rst:42
#: ../pro/ecc.rst:42
msgid "GnuPG 2.0 is still being used, but support for it has been discontinuied in 2017. All communication partners must use GnuPG 2.1 or newer for email encryption by means of ECC, otherwise incompatibility issues might arise. Therefore you should only use ECC if you are sure you will be able to circumvent this problem."
msgstr ""

#: ../pro/ecc.rst:49
#: ../pro/ecc.rst:49
#: ../pro/ecc.rst:49
msgid "Key Generation on the Nitrokey Storage 2 / Pro 2"
msgstr ""

#: ../pro/ecc.rst:51
#: ../pro/ecc.rst:51
#: ../pro/ecc.rst:51
msgid "Once these requirements are fulfilled, you can get started. (Warning: existing keys will be overwritten in the process!) You now have two options. The first option is to create the key directly on the Nitrokey Storage 2 / Pro 2. The benefit here is that the key will never be outside the device and as such can never be read out. The second option is to import a previously locally generated key. The advantage in this case is that you can securely store a backup of the key, which can then be restored in case the Nitrokey is lost. Only the first option is described below. In order to create a key with backup, you can access `the following instructions <https://www.gniibe.org/memo/software/gpg/keygen-25519.html>`__ and use this `general information <https://wiki.fsfe.org/TechDocs/CardHowtos/CardWithSubkeysUsingBackups>`__ to transfer the key to the Nitrokey."
msgstr ""

#: ../pro/ecc.rst:53
#: ../pro/ecc.rst:53
#: ../pro/ecc.rst:53
msgid "Within GnuPG there is already a “generate” command, which can be used to easily create keys on the device. However it is not as yet possible to select the type of key directly, so the key must first be prepared. We use the following commands for this:"
msgstr ""

#: ../pro/ecc.rst:61
#: ../pro/ecc.rst:61
#: ../pro/ecc.rst:61
msgid "Alternatively, other curves could be selected, as described in the next section."
msgstr ""

#: ../pro/ecc.rst:63
#: ../pro/ecc.rst:63
#: ../pro/ecc.rst:63
msgid "Now we enter ``gpg2 --card-edit`` and see that brainpoolP256r1 is under “key attributes” instead of rsa2048."
msgstr ""

#: ../pro/ecc.rst:89
#: ../pro/ecc.rst:89
#: ../pro/ecc.rst:89
msgid "Then we create the key."
msgstr ""

#: ../pro/ecc.rst:121
#: ../pro/ecc.rst:121
#: ../pro/ecc.rst:121
msgid "The Nitrokey now incorporates elliptic-curve cryptography instead of RSA keys and can be used as usual."
msgstr ""

#: ../pro/ecc.rst:124
#: ../pro/ecc.rst:124
#: ../pro/ecc.rst:124
msgid "Available Curves"
msgstr ""

#: ../pro/ecc.rst:126
#: ../pro/ecc.rst:126
#: ../pro/ecc.rst:126
msgid "In the above procedure we chose the Brainpool curves. Alternatively, NIST curves can be used. The configuration is carried out as follows:"
msgstr ""

#: ../pro/ecc.rst:135
#: ../pro/ecc.rst:135
#: ../pro/ecc.rst:135
msgid "Update of GnuPG on Ubuntu"
msgstr ""

#: ../pro/ecc.rst:137
#: ../pro/ecc.rst:137
#: ../pro/ecc.rst:137
msgid "The following steps are needed only if you are running a Ubuntu version older than 18.04. You can install GnuPG 2.1.18 on such system with the commands below. This involves newer Debian packages, which is the easiest option. This approach has been tested successfully on Ubuntu 17.10 and propbably works on 16.04 as well. However, the occurence of problems during usage can‘t be excluded."
msgstr ""

#: ../pro/ecc.rst:152
#: ../pro/ecc.rst:152
#: ../pro/ecc.rst:152
msgid "In case you want to undo the installation, you have to execute the following commands:"
msgstr ""

#: ../storage/linux/firmware-update.rst:2
#: ../storage/windows/firmware-update.rst:2
#: ../storage/windows/firmware-update.rst:2
msgid "Firmware Update"
msgstr ""

#: ../storage/linux/firmware-update.rst:10
#: ../storage/windows/firmware-update.rst:10
#: ../storage/windows/firmware-update.rst:10
msgid "You should backup all data from the device before upgrading, as firmware upgrades may destroy all data on the device (especially coming from firmware version <0.45)!"
msgstr ""

#: ../storage/linux/firmware-update.rst:14
msgid "Download the `Nitrokey App <https://www.nitrokey.com/download>`_ and the program “dfu-programmer” which should be available through your package-manager, e.g. ``apt-get update && apt-get install dfu-programmer`` on Debian-based systems."
msgstr ""

#: ../storage/linux/firmware-update.rst:16
msgid "Download the latest firmware \".hex\" file from `here <https://github.com/Nitrokey/nitrokey-storage-firmware/releases/download/V0.56/nitrokey-storage-V0.56.hex>`__ and store it as \"firmware.hex\" in your home folder. Older releases are `here <https://github.com/Nitrokey/nitrokey-storage-firmware/releases>`__."
msgstr ""

#: ../storage/linux/firmware-update.rst:18
#: ../storage/windows/firmware-update.rst:18
#: ../storage/windows/firmware-update.rst:18
msgid "Right click on the icon of the Nitrokey App and go to “Configure” -> “Enable Firmware Update”. The default firmware password is ‘12345678’."
msgstr ""

#: ../storage/linux/firmware-update.rst:25
#: ../storage/windows/firmware-update.rst:25
#: ../storage/windows/firmware-update.rst:25
msgid "The Nitrokey Storage is not detected by Nitrokey App anymore once update mode got activated. You have to proceed with the instructions described below to make it work again."
msgstr ""

#: ../storage/linux/firmware-update.rst:30
msgid "Open a terminal and execute:"
msgstr ""

#: ../storage/linux/firmware-update.rst:39
msgid "whereas “firmware.hex” needs to be the path and file name of the firmware which you downloaded in step 2."
msgstr ""

#: ../pro/gpa.rst:2
#: ../pro/gpa.rst:2
#: ../pro/gpa.rst:2
msgid "Setup with Gnu Privacy Assistant (GPA)"
msgstr ""

#: ../pro/gpa.rst:4
#: ../pro/gpa.rst:4
#: ../pro/gpa.rst:4
msgid "This document describes how to use Gnu Privacy Assistant (GPA) to set up the Nitrokey for its first usage."
msgstr ""

#: ../pro/gpa.rst:6
#: ../pro/gpa.rst:6
#: ../pro/gpa.rst:6
msgid "First you need to install Gnu Privacy Assistant (GPA). For Windows you should download and install the `GPG4Win <http://gpg4win.org/>`_ package which contains GPA. For Linux you should install the GPA package of your distribution (e.g. on Ubuntu: sudo apt-get install gpa )."
msgstr ""

#: ../pro/gpa.rst:8
#: ../pro/gpa.rst:8
#: ../pro/gpa.rst:8
msgid "Start GPA and select the Card Manager; either by pressing the icon at the top or by choosing Card Manager in the Windows menu."
msgstr ""

#: ../pro/gpa.rst:13
#: ../pro/gpa.rst:13
#: ../pro/gpa.rst:13
msgid "The window of the Card Manager will appear. Enter your salutation, name and optional other information. While doing so you might be asked to enter the admin PIN."
msgstr ""

#: ../pro/gpa.rst:18
#: ../pro/gpa.rst:18
#: ../pro/gpa.rst:18
msgid "Confirm this window and enter the admin PIN in the next window."
msgstr ""

#: ../pro/gpa.rst:23
#: ../pro/gpa.rst:23
#: ../pro/gpa.rst:23
msgid "In the Card Manager window you might need to scroll down until you see the buttons to change the PINs. The term PIN is used interchangeable with \"password\". Press the first button \"Change PIN\" in order to change the user password. Read and confirm the following information window."
msgstr ""

#: ../pro/gpa.rst:28
#: ../pro/gpa.rst:28
#: ../pro/gpa.rst:28
msgid "Choose and enter your own PIN with a minimum length of six characters. This PIN is required for the daily usage of the Nitrokey."
msgstr ""

#: ../pro/gpa.rst:33
#: ../pro/gpa.rst:33
#: ../pro/gpa.rst:33
msgid "Go back to the Card Manager window in step three. This time you choose the third button Change PIN in order to change the admin PIN. The admin PIN is required to change the information on the Nitrokey and to change the cryptographic keys. Proceed as described in steps four and five."
msgstr ""

#: ../pro/gpa.rst:35
#: ../pro/gpa.rst:35
#: ../pro/gpa.rst:35
msgid "After changing both the user and the admin PIN, you are back in the Card Manager window. Select \"Generate key\" in the \"Card\" menu."
msgstr ""

#: ../pro/gpa.rst:40
#: ../pro/gpa.rst:40
#: ../pro/gpa.rst:40
msgid "Enter your name and e-mail address. You should keep \"backup\" enabled in order to create a backup file of your cryptographic keys. Optionally you might select an expiration date for your cryptographic keys."
msgstr ""

#: ../pro/gpa.rst:45
#: ../pro/gpa.rst:45
#: ../pro/gpa.rst:45
msgid "Wait until the keys are generated successfully."
msgstr ""

#: ../pro/gpa.rst:50
#: ../pro/gpa.rst:50
#: ../pro/gpa.rst:50
msgid "Enter a strong passphrase for your backup keys. We strongly recommend to store the backup file on a separate storage(e.g. CD-ROM) and on a safe location."
msgstr ""

#: ../pro/gpa.rst:55
#: ../pro/gpa.rst:55
#: ../pro/gpa.rst:55
msgid "Congratulations, your Nitrokey is now ready to use. Please see the `applications <https://www.nitrokey.com/documentation/applications>`_ section for further information of its usage."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:2
msgid "Hard Disk Encryption"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:9
msgid "VeraCrypt (formerly TrueCrypt)"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:11
msgid "`VeraCrypt <https://www.veracrypt.fr/en/Home.html>`__ is a free and Open Source disk encryption software for Windows, macOS, and GNU/Linux. It is the successor of TrueCrypt and thus recommended, although the following instructions should apply to TrueCrypt as well."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:13
msgid "Follow these steps to use the program with `Nitrokey Storage 2 <https://shop.nitrokey.com/shop/product/nitrokey-storage-2-56>`__ or `Nitrokey Pro 2 <https://shop.nitrokey.com/shop/product/nk-pro-2-nitrokey-pro-2-3>`__:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:17
msgid "Install the latest release of `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__, or download the `PKCS#11 library <http://smartcard-auth.de/download-en.html>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:20
msgid "Choose the library in VeraCrypt under Settings>Preferences>Security Token (location depends on system, e.g. ``/usr/lib/opensc``)."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:22
msgid "Generate a 64 Byte key file via Tools>Keyfile Generator."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:23
msgid "Now you should be able to import the generated key file via Tools>Manage Security Token Keyfiles. You should choose the first Slot (``[0] User PIN``). The keyfile is then stored on the Nitrokey as ‘Private Data Object 1’ (``PrivDO1``)."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:27
msgid "After this you should wipe the original keyfile on your Computer securely!"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:29
msgid "Now you can use VeraCrypt with the Nitrokey: Create a container, choose the keyfile on the device as an alternative to a password."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:34
msgid "Security Consideration"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:36
msgid "Please note that VeraCrypt doesn’t make use of the full security which Nitrokey (and smart cards in general) offer. Instead it stores a keyfile on the Nitrokey which theoretically could be stolen by a computer virus after the user enters the PIN."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:41
msgid "Note: `Aloaha Crypt <http://www.aloaha.com/aloaha-crypt-disk/>`__ is based on TrueCrypt/VeraCrypt but without the described security limitation."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:44
msgid "Hard Disk Encryption on Linux with LUKS/dm-crypt"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:46
msgid "Here are `excellent instructions <http://blog.kumina.nl/2010/07/two-factor-luks-using-ubuntu/>`__ how to use Nitrokey to encrypt your hard disk under Linux with LUKS/dm-crypt. `Other instructions <https://wiki.ubuntu.com/SmartCardLUKSDiskEncryption>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:48
msgid "Purism has created a `simple script <https://docs.puri.sm/PureBoot/LibremKeyLUKS.html>`__ to add the Nitrokey/LibremKey as a way to unlock LUKS partitions (not tested by Nitrokey yet)."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:50
msgid "`This project <https://github.com/artosan/nitroluks/>`__ aims to ease the use of LUKS with the Nitrokey Pro or Storage based on the Password Safe (not tested by Nitrokey yet). A description on how to use it on Gentoo can be found `here <https://amedeos.github.io/gentoo/nitrokey/2019/01/21/gentoo-nitrokey-luks.html>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:52
msgid "For Arch Linux, see `initramfs-scencrypt <https://github.com/fuhry/initramfs-scencrypt>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:55
msgid "Storage Encryption on Linux with EncFS"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:59
msgid "Prerequisite"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:61
msgid "Please ensure that you `installed the device driver, changed the default PINs and generated or imported keys with GnuPG <https://www.nitrokey.com/start>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:65
msgid "`EncFS <http://www.arg0.net/encfs>`__ is an easy to utlity for encrypted file systems and it is based on `FUSE <http://de.wikipedia.org/wiki/Filesystem_in_Userspace>`__. You may follow these steps to use it with very long passwords and Nitrokey Pro 2:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:69
msgid "Initialization"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:71
msgid "Create a key file with random data:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:78
msgid "Encrypt the key file and use the User-ID of your Nitrokey"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:85
msgid "Remove the key file in clear text:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:92
msgid "Create mount point:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:99
msgid "Create the actual encryption folder"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:108
msgid "Unmount the new file system:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:118
msgid "Mount encrypted file system and enter PIN of Nitrokey:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:125
msgid "After usage, unmount the file system:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:133
msgid "Storage Encryption on Linux with ECryptFS"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:135
msgid "`eCryptfs <https://www.ecryptfs.org/>`__ is a file based transparent encryption file system for Linux which can be used with Nitrokey through a PKCS#11 driver."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:137
msgid "See `these <http://tkxuyen.com/blog/?p=293>`__ instructions:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:139
msgid "Import the certificate and key to the Nitrokey"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:147
msgid "Create the file ~/.ecryptfsrc.pkcs11:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:154
msgid "Enter this content:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:166
msgid "Copy the serialized id for later usage:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:176
msgid "Alternatively, try `ESOSI <http://sourceforge.net/projects/esosi/>`__ or follow these steps using OpenSC and OpenVPN."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:178
msgid "Source of the guide: https://www.nitrokey.com/documentation/applications#a:hard-disk-encryption"
msgstr ""

#: ../storage/linux/index.rst:2
msgid "Nitrokey Storage, Linux"
msgstr ""

#: ../storage/linux/index.rst:13
msgid "To access the OpenPGP smart card of the Nitrokey, install the package libccid. On Debian/Ubuntu based Distributions type in terminal: *sudo apt-get update && sudo apt-get install libccid*"
msgstr ""

#: ../storage/linux/index.rst:17
msgid "If your distribution has a rather old version of libccid (<1.4.21) you have to add the device information by yourself (for example if you are using Ubuntu 14.04 or older). In this case please follow these `instructions <https://www.nitrokey.com/documentation/frequently-asked-questions-faq#latest-device-driver-missing-on-older-linux-distribution>`__."
msgstr ""

#: ../storage/linux/index.rst:23
msgid "Download and start the `Nitrokey App <https://www.nitrokey.com/download>`__."
msgstr ""

#: ../storage/linux/index.rst:26
#: ../storage/mac/index.rst:19
#: ../storage/windows/index.rst:34
msgid "Open the About window from Nitrokey App’s menu and check if you have the `latest firmware <https://github.com/Nitrokey/nitrokey-storage-firmware/releases>`__ installed. If it’s not the latest, please `update <firmware-update.html>`__."
msgstr ""

#: ../storage/linux/index.rst:32
#: ../storage/mac/index.rst:24
#: ../storage/windows/index.rst:39
msgid "Use the Nitrokey App to change the default User PIN (default: 123456) and Admin PIN (default: 12345678) to your own choices."
msgstr ""

#: ../storage/linux/index.rst:35
#: ../storage/mac/index.rst:27
#: ../storage/windows/index.rst:42
msgid "Your Nitrokey is now ready to use. `Checkout <https://www.nitrokey.com/documentation/applications>`__ the various use cases and supported applications."
msgstr ""

#: ../storage/linux/index.rst:41
#: ../storage/mac/index.rst:39
#: ../storage/windows/index.rst:48
msgid "For many use cases described, it is necessary to have either OpenPGP or S/MIME keys installed on the device (see below)."
msgstr ""

#: ../storage/linux/index.rst:45
#: ../storage/mac/index.rst:43
#: ../storage/windows/index.rst:52
msgid "Key Creation with OpenPGP or S/MIME"
msgstr ""

#: ../storage/linux/index.rst:47
#: ../storage/mac/index.rst:45
#: ../storage/windows/index.rst:54
msgid "There are two widely used standards for email encryption. While OpenPGP/GnuPG is popular among individuals, S/MIME/x.509 is mostly used by enterprises. If you are in doubt which one to choose, you should use OpenPGP."
msgstr ""

#: ../storage/linux/index.rst:52
#: ../storage/mac/index.rst:50
#: ../storage/windows/index.rst:59
msgid "`instructions <openpgp.html>`__ for using the OpenPGP standard with the Nitrokey"
msgstr ""

#: ../storage/linux/index.rst:55
#: ../storage/mac/index.rst:53
#: ../storage/windows/index.rst:62
msgid "`instructions <smime.html>`__ for using S/MIME with the Nitrokey"
msgstr ""

#: ../pro/openpgp.rst:2
#: ../pro/openpgp.rst:2
#: ../pro/openpgp.rst:2
msgid "OpenPGP Email Encryption"
msgstr ""

#: ../pro/openpgp.rst:8
#: ../pro/smime.rst:11
#: ../pro/openpgp.rst:8
#: ../pro/smime.rst:11
#: ../pro/openpgp.rst:8
#: ../pro/smime.rst:11
msgid "There are two widely used standards for email encryption."
msgstr ""

#: ../pro/openpgp.rst:10
#: ../pro/smime.rst:13
#: ../pro/openpgp.rst:10
#: ../pro/smime.rst:13
#: ../pro/openpgp.rst:10
#: ../pro/smime.rst:13
msgid "OpenPGP/GnuPG is popular among individuals,"
msgstr ""

#: ../pro/openpgp.rst:12
#: ../pro/smime.rst:15
#: ../pro/openpgp.rst:12
#: ../pro/smime.rst:15
#: ../pro/openpgp.rst:12
#: ../pro/smime.rst:15
msgid "S/MIME/X.509 is mostly used by enterprises."
msgstr ""

#: ../pro/openpgp.rst:14
#: ../pro/openpgp.rst:14
#: ../pro/openpgp.rst:14
msgid "If you are in doubt which one to choose, you should use OpenPGP. While this page describes the usage of OpenPGP, S/MIME is described `here <smime.html>`__."
msgstr ""

#: ../pro/openpgp.rst:16
#: ../pro/openpgp.rst:16
#: ../pro/openpgp.rst:16
msgid "Please familiarize yourself with the general concept behind the OpenPGP standard first, for example by reading `this info graphic <https://emailselfdefense.fsf.org/en/infographic.html>`__ of the Free Software Foundation."
msgstr ""

#: ../pro/openpgp.rst:19
#: ../pro/openpgp-keygen-backup.rst:11
#: ../pro/openpgp-keygen-gpa.rst:13
#: ../pro/openpgp-keygen-on-device.rst:19
#: ../pro/openpgp.rst:19
#: ../pro/openpgp-keygen-backup.rst:11
#: ../pro/openpgp-keygen-on-device.rst:19
#: ../pro/openpgp.rst:19
#: ../pro/openpgp-keygen-backup.rst:11
#: ../pro/openpgp-keygen-gpa.rst:13
#: ../pro/openpgp-keygen-on-device.rst:19
msgid "Key Generation"
msgstr ""

#: ../pro/openpgp.rst:21
#: ../pro/openpgp.rst:21
#: ../pro/openpgp.rst:21
msgid "If you do not have OpenPGP keys yet, you need to generate them first."
msgstr ""

#: ../pro/openpgp.rst:23
#: ../pro/openpgp.rst:23
#: ../pro/openpgp.rst:23
msgid "`Generate keys on Nitrokey <openpgp-keygen-gpa.html>`__ - this is the best option if you are unexperienced, but you won’t have a backup of your keys and therefore won’t be able to mitigate the loss of the Nitrokey"
msgstr ""

#: ../pro/openpgp.rst:29
#: ../pro/openpgp.rst:29
#: ../pro/openpgp.rst:29
msgid "`Generate keys on Nitrokey with different algorithm or key size <openpgp-keygen-on-device.html>`__ - this is as secure as the previous option and thus you won’t have a backup as well, but you can change the key attributes (that is the algorithm and key size)"
msgstr ""

#: ../pro/openpgp.rst:35
#: ../pro/openpgp.rst:35
#: ../pro/openpgp.rst:35
msgid "`Generate keys locally <openpgp-keygen-backup.html>`__ and copy them to Nitrokey - this is the most flexible, expert option, but only secure if your system is not compromised, because you can create a backup key outside your Nitrokey A similar description in french can be found `here <https://xieme-art.org/post/importer-des-clefs-gnupg-dans-sa-nitrokey-pro/>`__."
msgstr ""

#: ../pro/openpgp.rst:44
#: ../pro/openpgp.rst:44
#: ../pro/openpgp.rst:44
msgid "Importing Existing Keys"
msgstr ""

#: ../pro/openpgp.rst:46
#: ../pro/openpgp.rst:46
#: ../pro/openpgp.rst:46
msgid "If you already have OpenPGP keys you may want to use them with your Nitrokey, instead of generating new ones. Importing exsiting keys works basically the same as generating keys locally first and copy them to the Nitrokey (see above). Therefore, please have a look at the `corresponding instructions <openpgp-keygen-backup.html#key-import>`__. Note that you probably want to generate another subkey for authentication to your existing key. See at the same instructions for `subkey generation <openpgp-keygen-backup.html#subkey-for-authentication>`__."
msgstr ""

#: ../pro/openpgp.rst:51
#: ../pro/smime.rst:59
#: ../pro/openpgp.rst:51
#: ../pro/smime.rst:59
#: ../pro/openpgp.rst:51
#: ../pro/smime.rst:59
msgid "You can find further information about the usage on these pages:"
msgstr ""

#: ../pro/openpgp.rst:53
#: ../pro/openpgp.rst:53
#: ../pro/openpgp.rst:53
msgid "for using `OpenPGP encryption with Thunderbird <openpgp-thunderbird.html>`__"
msgstr ""

#: ../pro/openpgp.rst:56
#: ../pro/openpgp.rst:56
#: ../pro/openpgp.rst:56
msgid "for using `OpenPGP encryption with Outlook <openpgp-outlook.html>`__"
msgstr ""

#: ../pro/openpgp.rst:59
#: ../pro/openpgp.rst:59
#: ../pro/openpgp.rst:59
msgid "for using `Claws Mail <https://www.claws-mail.org/plugin.php?plugin=gpg>`__, an email client (and news reader) for Linux and Windows"
msgstr ""

#: ../pro/openpgp.rst:63
#: ../pro/smime.rst:67
#: ../pro/openpgp.rst:63
#: ../pro/smime.rst:67
#: ../pro/openpgp.rst:63
#: ../pro/smime.rst:67
msgid "for using `Evolution <https://help.gnome.org/users/evolution/stable/mail-encryption.html.en>`__, an email client for the Gnome Desktop on Linux systems"
msgstr ""

#: ../pro/openpgp.rst:67
#: ../pro/openpgp.rst:67
#: ../pro/openpgp.rst:67
msgid "for using `GPGTools <https://gpgtools.org/>`__ on macOS."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:2
#: ../pro/openpgp-keygen-backup.rst:2
#: ../pro/openpgp-keygen-backup.rst:2
msgid "OpenPGP Key Generation With Backup"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:8
#: ../pro/openpgp-keygen-backup.rst:8
#: ../pro/openpgp-keygen-backup.rst:8
msgid "The following instructions explain the generation of OpenPGP keys and how to copy them to the Nitrokey. This method has the advantage of providing a backup of the keys in case of losing or breaking the Nitrokey. The instructions are based on the command line interface of GnuPG. Thus, you need to have GnuPG installed on your system. The newest GnuPG version for Windows can be found `here <https://www.gpg4win.org/>`__ and the newest version for MacOS can be found `here <https://gpgtools.org/>`__. Users of Linux systems please install GnuPG with help of the package manager."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:13
#: ../pro/openpgp-keygen-backup.rst:13
#: ../pro/openpgp-keygen-backup.rst:13
msgid "At first, you need to generate a key locally. You can decide, which key attributes to use and - most importantly - you can export the key and keep it somewhere save in case you need to restore the key."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:16
#: ../pro/openpgp-keygen-backup.rst:16
#: ../pro/openpgp-keygen-backup.rst:16
msgid "Main Key and Encryption Subkey"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:18
#: ../pro/openpgp-keygen-backup.rst:18
#: ../pro/openpgp-keygen-backup.rst:18
msgid "We can use the command ``gpg --full-generate-key --expert`` to start a guided key generation with all possible options. You can choose the key type (usually RSA (1) or ECC (9)), the length of the key and other attributes. The following output is just a simple example, you may choose other values."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:81
#: ../pro/openpgp-keygen-backup.rst:81
#: ../pro/openpgp-keygen-backup.rst:81
msgid "The following table illustrates which algorithm can be used on which device, in case you want to use different key attributes."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
msgid "\\"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
msgid "Start"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
msgid "Pro + Storage"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
#: ../pro/openpgp-keygen-backup.rst:84
#: ../pro/openpgp-keygen-on-device.rst:193
msgid "Pro 2 + Storage 2"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:86
#: ../pro/openpgp-keygen-on-device.rst:195
#: ../pro/openpgp-keygen-backup.rst:86
#: ../pro/openpgp-keygen-on-device.rst:195
#: ../pro/openpgp-keygen-backup.rst:86
#: ../pro/openpgp-keygen-on-device.rst:195
msgid "rsa1024"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:86
#: ../pro/openpgp-keygen-backup.rst:86
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:88
#: ../pro/openpgp-keygen-backup.rst:88
#: ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-backup.rst:90
#: ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-backup.rst:92
#: ../pro/openpgp-keygen-backup.rst:93
#: ../pro/openpgp-keygen-on-device.rst:195
#: ../pro/openpgp-keygen-on-device.rst:195
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:197
#: ../pro/openpgp-keygen-on-device.rst:197
#: ../pro/openpgp-keygen-on-device.rst:198
#: ../pro/openpgp-keygen-on-device.rst:198
#: ../pro/openpgp-keygen-on-device.rst:199
#: ../pro/openpgp-keygen-on-device.rst:200
#: ../pro/openpgp-keygen-on-device.rst:200
#: ../pro/openpgp-keygen-on-device.rst:201
#: ../pro/openpgp-keygen-on-device.rst:202
#: ../pro/openpgp-keygen-backup.rst:86
#: ../pro/openpgp-keygen-backup.rst:86
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:88
#: ../pro/openpgp-keygen-backup.rst:88
#: ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-backup.rst:90
#: ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-backup.rst:92
#: ../pro/openpgp-keygen-backup.rst:93
#: ../pro/openpgp-keygen-on-device.rst:195
#: ../pro/openpgp-keygen-on-device.rst:195
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:197
#: ../pro/openpgp-keygen-on-device.rst:197
#: ../pro/openpgp-keygen-on-device.rst:198
#: ../pro/openpgp-keygen-on-device.rst:198
#: ../pro/openpgp-keygen-on-device.rst:199
#: ../pro/openpgp-keygen-on-device.rst:200
#: ../pro/openpgp-keygen-on-device.rst:200
#: ../pro/openpgp-keygen-on-device.rst:201
#: ../pro/openpgp-keygen-on-device.rst:202
#: ../pro/openpgp-keygen-backup.rst:86
#: ../pro/openpgp-keygen-backup.rst:86
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:88
#: ../pro/openpgp-keygen-backup.rst:88
#: ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-backup.rst:90
#: ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-backup.rst:92
#: ../pro/openpgp-keygen-backup.rst:93
#: ../pro/openpgp-keygen-on-device.rst:195
#: ../pro/openpgp-keygen-on-device.rst:195
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:197
#: ../pro/openpgp-keygen-on-device.rst:197
#: ../pro/openpgp-keygen-on-device.rst:198
#: ../pro/openpgp-keygen-on-device.rst:198
#: ../pro/openpgp-keygen-on-device.rst:199
#: ../pro/openpgp-keygen-on-device.rst:200
#: ../pro/openpgp-keygen-on-device.rst:200
#: ../pro/openpgp-keygen-on-device.rst:201
#: ../pro/openpgp-keygen-on-device.rst:202
msgid "✓"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-on-device.rst:196
msgid "rsa2048"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:88
#: ../pro/openpgp-keygen-on-device.rst:197
#: ../pro/openpgp-keygen-backup.rst:88
#: ../pro/openpgp-keygen-on-device.rst:197
#: ../pro/openpgp-keygen-backup.rst:88
#: ../pro/openpgp-keygen-on-device.rst:197
msgid "rsa3072"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-on-device.rst:198
#: ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-on-device.rst:198
#: ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-on-device.rst:198
msgid "rsa4096"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:90
#: ../pro/openpgp-keygen-on-device.rst:199
#: ../pro/openpgp-keygen-backup.rst:90
#: ../pro/openpgp-keygen-on-device.rst:199
#: ../pro/openpgp-keygen-backup.rst:90
#: ../pro/openpgp-keygen-on-device.rst:199
msgid "curve25519 (ECC)"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-on-device.rst:200
#: ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-on-device.rst:200
#: ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-on-device.rst:200
msgid "NIST (ECC)"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:92
#: ../pro/openpgp-keygen-on-device.rst:201
#: ../pro/openpgp-keygen-backup.rst:92
#: ../pro/openpgp-keygen-on-device.rst:201
#: ../pro/openpgp-keygen-backup.rst:92
#: ../pro/openpgp-keygen-on-device.rst:201
msgid "Brainpool (ECC)"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:93
#: ../pro/openpgp-keygen-on-device.rst:202
#: ../pro/openpgp-keygen-backup.rst:93
#: ../pro/openpgp-keygen-on-device.rst:202
#: ../pro/openpgp-keygen-backup.rst:93
#: ../pro/openpgp-keygen-on-device.rst:202
msgid "secp256k1"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:97
#: ../pro/openpgp-keygen-backup.rst:97
#: ../pro/openpgp-keygen-backup.rst:97
msgid "Subkey for Authentication"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:99
#: ../pro/openpgp-keygen-backup.rst:99
#: ../pro/openpgp-keygen-backup.rst:99
msgid "You now have a main key with the capability to sign and certify (marked as [SC]) and a subkey for encryption (marked as [E]). It is necessary to have another subkey for use cases in which authentication is needed. This subkey is generated in the next step. Type in ``gpg --edit-key --expert keyID`` to start the process, whereas “keyID” is either the id of the key or the email address used during key generation."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:120
#: ../pro/openpgp-keygen-backup.rst:120
#: ../pro/openpgp-keygen-backup.rst:120
msgid "Now you are in the interactive mode of GnuPG and you can add a key by simply typing ``addkey``. You need to choose the key you want to use. It is crucial to choose “set your own capabilities”, because we want to have the “authenticate” capability which is not available otherwise. We toggle sign and encrypt by typing ``s`` and ``e`` and we activate authenticate by typing ``a``."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:178
#: ../pro/openpgp-keygen-backup.rst:178
#: ../pro/openpgp-keygen-backup.rst:178
msgid "We quit with ``q``. Afterwards we need to answer the same questions as before. Finally, we have a ready-to-go key set which we can import to our device."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:212
#: ../pro/openpgp-keygen-backup.rst:212
#: ../pro/openpgp-keygen-backup.rst:212
msgid "Now is good time to backup your key. Please keep this backup very secure. It is best practice to never have this key on a regular computer which has connection to the internet, so that the key never gets compromised. You can create a backup with something like:"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:219
#: ../pro/openpgp-keygen-backup.rst:219
#: ../pro/openpgp-keygen-backup.rst:219
msgid "Key Import"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:221
#: ../pro/openpgp-keygen-backup.rst:221
#: ../pro/openpgp-keygen-backup.rst:221
msgid "You have a main key and two subkeys which can be imported to your Nitrokey. Before proceeding please make sure that you really have a backup of the key, if you need one. The ``keytocard`` command used in the next steps will **delete** your key from your disk!"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:223
#: ../pro/openpgp-keygen-backup.rst:223
#: ../pro/openpgp-keygen-backup.rst:223
msgid "We start the process by accessing the interactive interface of GnuPG again with ``gpg --edit-key --expert keyID``, whereas ``keyID`` is either the id of the key or the email address used during key generation."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:259
#: ../pro/openpgp-keygen-backup.rst:259
#: ../pro/openpgp-keygen-backup.rst:259
msgid "We just imported the main key to the card. Now we proceed with the two subkeys. We type ``key 1`` to select the encryption subkey and type in ``keytocard`` again and select the slot to use."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:288
#: ../pro/openpgp-keygen-backup.rst:288
#: ../pro/openpgp-keygen-backup.rst:288
msgid "Now we deselect the first key with ``key 1`` and select the second subkey with ``key 2`` and move it as well with ``keytocard``. Afterwards we quit and save the changes."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:331
#: ../pro/openpgp-keygen-backup.rst:331
#: ../pro/openpgp-keygen-backup.rst:331
msgid "Your keys are now moved to the Nitrokey and thus secured in hardware. Congratulations!"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:334
#: ../pro/openpgp-keygen-gpa.rst:53
#: ../pro/openpgp-keygen-on-device.rst:206
#: ../pro/openpgp-keygen-backup.rst:334
#: ../pro/openpgp-keygen-on-device.rst:206
#: ../pro/openpgp-keygen-backup.rst:334
#: ../pro/openpgp-keygen-gpa.rst:53
#: ../pro/openpgp-keygen-on-device.rst:206
msgid "Exporting Public Key and Keyserver Usage"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:336
#: ../pro/openpgp-keygen-gpa.rst:55
#: ../pro/openpgp-keygen-on-device.rst:208
#: ../pro/openpgp-keygen-backup.rst:336
#: ../pro/openpgp-keygen-on-device.rst:208
#: ../pro/openpgp-keygen-backup.rst:336
#: ../pro/openpgp-keygen-gpa.rst:55
#: ../pro/openpgp-keygen-on-device.rst:208
msgid "Although you can start to use your Nitrokey right away after generating the keys on your system, you need to import your public key on every system, you want to use the Nitrokey on. So to be prepared you have two options: You either save the public key anywhere you like and use it on another system or you save the public key on a webpage/keyserver."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:339
#: ../pro/openpgp-keygen-on-device.rst:211
#: ../pro/openpgp-keygen-backup.rst:339
#: ../pro/openpgp-keygen-on-device.rst:211
#: ../pro/openpgp-keygen-backup.rst:339
#: ../pro/openpgp-keygen-on-device.rst:211
msgid "Generating a Public Key File"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:341
#: ../pro/openpgp-keygen-backup.rst:341
#: ../pro/openpgp-keygen-backup.rst:341
msgid "To get a simple file of your public key, you can just use ``gpg --armor --export keyID > pubkey.asc``. Use either the fingerprint as “keyID” (look at ``gpg -K`` to get it) or just use your email address as an identifier."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:343
#: ../pro/openpgp-keygen-backup.rst:343
#: ../pro/openpgp-keygen-backup.rst:343
msgid "You can carry this file with you or send it to anyone who you like. This file is not secret at all. If you want to use the Nitrokey on another system, you first import this public key via ``gpg --import pubkey.asc`` and then types ``gpg --card-status`` so that the system knows where to look for this key. That’s all."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:347
#: ../pro/openpgp-keygen-on-device.rst:218
#: ../pro/openpgp-keygen-backup.rst:347
#: ../pro/openpgp-keygen-on-device.rst:218
#: ../pro/openpgp-keygen-backup.rst:347
#: ../pro/openpgp-keygen-on-device.rst:218
msgid "Uploading the Public Key"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:349
#: ../pro/openpgp-keygen-on-device.rst:220
#: ../pro/openpgp-keygen-backup.rst:349
#: ../pro/openpgp-keygen-on-device.rst:220
#: ../pro/openpgp-keygen-backup.rst:349
#: ../pro/openpgp-keygen-on-device.rst:220
msgid "If you do not want to carry a public keyfile with you, you can upload it to keyserver. You can do this by typing ``gpg --keyserver search.keyserver.net --send-key keyID``. If you are using another machine you can just import it by using ``gpg --keyserver search.keyserver.net --recv-key keyID``."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:351
#: ../pro/openpgp-keygen-backup.rst:351
#: ../pro/openpgp-keygen-backup.rst:351
msgid "Another possibility is to change the URL setting on your card. Start ``gpg --card-edit`` again and first set the URL where the key is situated (e.g. on the keyserver or on your webpage etc.) via the ``url`` command. From now on you can import the key on another system by just using the ``fetch`` command within the ``gpg --card-edit environment``."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:2
#: ../pro/openpgp-keygen-gpa.rst:2
msgid "OpenPGP Key Generation Using GPA"
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:8
#: ../pro/openpgp-keygen-gpa.rst:8
msgid "The following instructions explain the generation of OpenPGP keys directly on the Nitrokey with help of the GNU Privacy Assistant (GPA). You won’t be able to create a backup of these keys. Thus, if you lose the Nitrokey or it breaks you can not decrypt mails or use these keys anymore. Please see `here <openpgp-outlook.html>`__ for a comparison of the different methods to generate OpenPGP keys."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:10
#: ../pro/openpgp-keygen-gpa.rst:10
msgid "You need to have GnuPG and GPA installed on your system. The newest version for Windows can be found `here <https://www.gpg4win.org/>`__ (make sure to check “GPA” during the installation!). Users of Linux systems please install GnuPG and GPA with help of the package manager (e.g. using ``sudo apt install gnupg gpa`` on Ubuntu)."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:15
#: ../pro/openpgp-keygen-gpa.rst:15
msgid "At first, open the GNU Privacy Assistant (GPA). You may are asked to generate a key, you can skip this step for now by clicking “Do it later”. In the main window, please click on “Card” or “Card Manager”."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:22
#: ../pro/openpgp-keygen-gpa.rst:22
msgid "Another windows opens. Please go to “Card” -> “Generate key” to start the key generation process."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:29
#: ../pro/openpgp-keygen-gpa.rst:29
msgid "Now you can put in your name and the email address you want to use for the key that will be generated next. You may choose an expiration date for your key, but you don’t have to."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:31
#: ../pro/openpgp-keygen-gpa.rst:31
msgid "**Please do not use the backup checkbox**. This “backup” does only save the encryption key. In case of a loss of the device, you will not be able to restore the whole key set. So on the one hand it is no full backup (use `these instructions <openpgp-keygen-backup.html>`__ instead, if you need one) and on the other hand you risk that someone else can get in possession of your encryption key. The advantage of generating keys on-device is to make sure that keys are stored securely. Therefore, we recommend to skip this half-backup."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:38
#: ../pro/openpgp-keygen-gpa.rst:38
msgid "You will be asked for the admin PIN (default: 12345678) and the user PIN (default: 123456). When the key generation is finished, you can see the fingerprints of the keys on the bottom of the window. You may fill up the fields shown above, which are saved on your Nitrokey as well."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:45
#: ../pro/openpgp-keygen-gpa.rst:45
msgid "Now you can close the window and go back to the main window. Your key will be visible in the key manager after refreshing. Every application which makes use of GnuPG will work with your Nitrokey as well, because GnuPG is fully aware of the fact, that the keys are stored on your Nitrokey."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:62
#: ../pro/openpgp-keygen-gpa.rst:62
msgid "Right-click on your key entry in the key manager and click “Export Keys…” to export the public key to a file and/or “Send Keys…” to upload the key to a keyserver."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:64
#: ../pro/openpgp-keygen-gpa.rst:64
msgid "You can carry the keyfile with you or send it to anyone who you like. This file is not secret at all. If you want to use the Nitrokey on another system, you first import this public key via clicking on “Keys” -> “Importing Keys…” and choosing the file."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:67
#: ../pro/openpgp-keygen-gpa.rst:67
msgid "If you do not want to carry a public keyfile with you, you can upload it to keyserver. If you are using another machine you can just import it by using “Server” -> “Retrieve Keys…” and entering your name or key id."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst:69
#: ../pro/openpgp-keygen-gpa.rst:69
msgid "Another possibility is to change the URL setting on your card. Open the card manager again and fill in the URL where the key is situated (e.g. on the keyserver or on your webpage etc.). From now on you can import the key on another system by right-clicking on the URL and click on “Fetch Key”."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:2
#: ../pro/openpgp-keygen-on-device.rst:2
#: ../pro/openpgp-keygen-on-device.rst:2
msgid "OpenPGP Key Generation On-Device"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:8
#: ../pro/openpgp-keygen-on-device.rst:8
#: ../pro/openpgp-keygen-on-device.rst:8
msgid "The following instructions explain the generation of OpenPGP keys directly on the Nitrokey. This is done by using the command line interface of GnuPG. Thus, you need to have GnuPG installed on your system. The newest GnuPG version for Windows can be found `here <https://www.gpg4win.org/>`__ and the newest version for MacOS can be found `here <https://gpgtools.org/>`__. Users of Linux systems please install GnuPG with help of the package manager."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:12
#: ../pro/openpgp-keygen-on-device.rst:12
#: ../pro/openpgp-keygen-on-device.rst:12
msgid "These instructions are based on GnuPG version 2.2.6 or higher. Some Linux Distributions have an older version installed. In this case please choose a different method as listed `here <openpgp.html>`__ or install a newer version if possible."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:21
#: ../pro/openpgp-keygen-on-device.rst:21
#: ../pro/openpgp-keygen-on-device.rst:21
msgid "The following descriptions explain the basic key generation on-device via GnuPG’s command line interface. The default behaviour is to generate RSA keys of 2048 bit size. If you want to change the key algorithm and length, have a look at the next section first."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:23
#: ../pro/openpgp-keygen-on-device.rst:23
#: ../pro/openpgp-keygen-on-device.rst:23
msgid "Open a command line and type ``gpg2 --card-edit``."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:25
#: ../pro/smime.rst:29
#: ../pro/openpgp-keygen-on-device.rst:25
#: ../pro/smime.rst:29
#: ../pro/openpgp-keygen-on-device.rst:25
#: ../pro/smime.rst:29
msgid "To open the Windows command line please push the Windows-key and R-key. Now type ‘cmd.exe’ in the text field and hit enter. To open a Terminal on macOS or GNU/Linux please use the application search (e.g. spotlight on macOS)."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:53
#: ../pro/openpgp-keygen-on-device.rst:53
#: ../pro/openpgp-keygen-on-device.rst:53
msgid "Now you are in the interactive interface of GnuPG. Activate the admin commands with ``admin`` and use ``generate`` afterwards to start the generation of keys."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:95
#: ../pro/openpgp-keygen-on-device.rst:95
#: ../pro/openpgp-keygen-on-device.rst:95
msgid "**Please do not create the suggested off-card backup.** This “backup” does only save the encryption key, but not the signature and authentication keys. In case of a loss of the device, you will not be able to restore the whole key set. So on the one hand it is no full backup (use `these instructions <openpgp-keygen-backup.html>`__ instead, if you need one) and on the other hand you risk that someone else can get in possession of your encryption key. The advantage of generating keys on-device is to make sure that keys are stored securely. Therefore, we recommend to skip this half-backup."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:98
#: ../pro/openpgp-keygen-on-device.rst:98
#: ../pro/openpgp-keygen-on-device.rst:98
msgid "Now you have a complete key set on your device which can be used for the `various applications <https://www.nitrokey.com/documentation/applications>`__ listed on our site. Type ``quit`` and hit enter to exit."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:101
#: ../pro/openpgp-keygen-on-device.rst:101
#: ../pro/openpgp-keygen-on-device.rst:101
msgid "Change Key Attributes"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:103
#: ../pro/openpgp-keygen-on-device.rst:103
#: ../pro/openpgp-keygen-on-device.rst:103
msgid "This section is about changing the key attributes. If you want to use the default values, you can proceed with the next section."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:105
#: ../pro/openpgp-keygen-on-device.rst:105
#: ../pro/openpgp-keygen-on-device.rst:105
msgid "Open a command line and type ``gpg2 --card-edit --expert``."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:131
#: ../pro/openpgp-keygen-on-device.rst:131
#: ../pro/openpgp-keygen-on-device.rst:131
msgid "Now you are in the interactive interface of GnuPG. As you can see in the “Key attributes” field above, the default value rsa2048 is set. To change them, activate the admin commands with ``admin`` and use ``key-attr`` afterwards to change the attributes of the keys."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:162
#: ../pro/openpgp-keygen-on-device.rst:162
#: ../pro/openpgp-keygen-on-device.rst:162
msgid "You can choose the attribute for each key (that is, signature, encryption and authentication key). Most people will use the same attributes for every key. Type ``list`` to see the results (have look at the “Key attributes” field, which now reads rsa4096)."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:188
#: ../pro/openpgp-keygen-on-device.rst:188
#: ../pro/openpgp-keygen-on-device.rst:188
msgid "Type ``quit`` and hit enter to exit or proceed directly with the previous section to actually generate the keys with the key attributes you just set."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:190
#: ../pro/openpgp-keygen-on-device.rst:190
#: ../pro/openpgp-keygen-on-device.rst:190
msgid "The following table illustrates which algorithm can be used on which device."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:213
#: ../pro/openpgp-keygen-on-device.rst:213
#: ../pro/openpgp-keygen-on-device.rst:213
msgid "To get a simple file of your public key, you can just use ``gpg2 --armor --export keyID > pubkey.asc``. Use either the fingerprint as “keyID” (look at ``gpg -K`` to get it) or just use your email address as an identifier."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:215
#: ../pro/openpgp-keygen-on-device.rst:215
#: ../pro/openpgp-keygen-on-device.rst:215
msgid "You can carry this file with you or send it to anyone who you like. This file is not secret at all. If you want to use the Nitrokey on another system, you first import this public key via ``gpg2 --import pubkey.asc`` and then types ``gpg2 --card-status`` so that the system knows where to look for this key. That’s all."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst:222
#: ../pro/openpgp-keygen-on-device.rst:222
#: ../pro/openpgp-keygen-on-device.rst:222
msgid "Another possibility is to change the URL setting on your card. Start gpg –card-edit again and first set the URL where the key is situated (e.g. on the keyserver or on your webpage etc.) via the ``url`` command. From now on you can import the key on another system by just using the ``fetch`` command within the ``gpg --card-edit`` environment."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:2
#: ../pro/openpgp-thunderbird.rst:2
#: ../pro/openpgp-thunderbird.rst:2
msgid "OpenPGP Email Encryption With Thunderbird"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:9
#: ../pro/openpgp-thunderbird.rst:9
#: ../pro/openpgp-thunderbird.rst:9
msgid "Thunderbird 78.3 and newer"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:11
#: ../pro/openpgp-thunderbird.rst:11
#: ../pro/openpgp-thunderbird.rst:11
msgid "At the moment Thunderbird’s 78 support for the OpenPGP emails is not easy to set up. See `Thunderbird’s documentation <https://wiki.mozilla.org/Thunderbird:OpenPGP:Smartcards>`__ for details. Here is a `comprehensive German guide <https://decatec.de/it/thunderbird-78-pgp-verschluesselung-mit-dem-nitrokey-storage/>`__."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:14
#: ../pro/smime.rst:72
#: ../pro/openpgp-thunderbird.rst:14
#: ../pro/smime.rst:72
#: ../pro/openpgp-thunderbird.rst:14
#: ../pro/smime.rst:72
msgid "Troubleshooting"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:16
#: ../pro/openpgp-thunderbird.rst:16
#: ../pro/openpgp-thunderbird.rst:16
msgid "Error message: ``The configured key ID '4BA0183FCBA844A7' cannot be found on your keyring``"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:18
#: ../pro/openpgp-thunderbird.rst:18
#: ../pro/openpgp-thunderbird.rst:18
msgid "Make sure that the public key is imported to the Thunderbird’s manager and"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:19
#: ../pro/openpgp-thunderbird.rst:19
#: ../pro/openpgp-thunderbird.rst:19
msgid "The key ID does not contain any whitespace, and consists of 16 characters from range 0-9 A-F"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:20
#: ../pro/openpgp-thunderbird.rst:20
#: ../pro/openpgp-thunderbird.rst:20
msgid "you have GPA or Kleopatra software installed."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:22
#: ../pro/openpgp-thunderbird.rst:22
#: ../pro/openpgp-thunderbird.rst:22
msgid "Please use Kleopatra or `GPA <openpgp-keygen-gpa.html>`__ software to handle the smart card."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:25
#: ../pro/openpgp-thunderbird.rst:25
#: ../pro/openpgp-thunderbird.rst:25
msgid "Thunderbird 77 and older"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:28
#: ../pro/openpgp-thunderbird.rst:28
#: ../pro/openpgp-thunderbird.rst:28
msgid "Installation"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:30
#: ../pro/openpgp-thunderbird.rst:30
#: ../pro/openpgp-thunderbird.rst:30
msgid "Install the device driver as described `here <https://www.nitrokey.com/documentation/installation>`__."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:33
#: ../pro/openpgp-thunderbird.rst:33
#: ../pro/openpgp-thunderbird.rst:33
msgid "Install `Thunderbird <https://www.thunderbird.net/en-US/>`__ and the Add-on `Enigmail <https://www.enigmail.net/index.php/en/>`__."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:37
#: ../pro/openpgp-thunderbird.rst:37
#: ../pro/openpgp-thunderbird.rst:37
msgid "Changing PINs"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:39
#: ../pro/openpgp-thunderbird.rst:39
#: ../pro/openpgp-thunderbird.rst:39
msgid "There are two PINs for the Nitrokey:"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:41
#: ../pro/openpgp-thunderbird.rst:41
#: ../pro/openpgp-thunderbird.rst:41
msgid "The User PIN required for daily work"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:43
#: ../pro/openpgp-thunderbird.rst:43
#: ../pro/openpgp-thunderbird.rst:43
msgid "The Admin PIN is required to change keys or other settings of the device. In addition, the Nitrokey can be unlocked (for example, after 3 times incorrect input of the User PIN) by means of the Admin PIN."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:47
#: ../pro/openpgp-thunderbird.rst:47
#: ../pro/openpgp-thunderbird.rst:47
msgid "After receiving the Nitrokey, you should immediately change the User PIN = “123456” and Admin PIN = “12345678”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:51
#: ../pro/openpgp-thunderbird.rst:51
#: ../pro/openpgp-thunderbird.rst:51
msgid "Procedure"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:53
#: ../pro/openpgp-thunderbird.rst:53
#: ../pro/openpgp-thunderbird.rst:53
msgid "Insert the Nitrokey into a USB port on your computer."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:55
#: ../pro/openpgp-thunderbird.rst:55
#: ../pro/openpgp-thunderbird.rst:55
msgid "Start Thunderbird."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:57
#: ../pro/openpgp-thunderbird.rst:57
#: ../pro/openpgp-thunderbird.rst:57
msgid "In Thunderbird, select as shown in the following picture. “OpenPGP” → “Manage smart card”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:65
#: ../pro/openpgp-thunderbird.rst:65
#: ../pro/openpgp-thunderbird.rst:65
msgid "In the “SmartCard Details” window, select “SmartCard → Change PIN”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:72
#: ../pro/openpgp-thunderbird.rst:72
#: ../pro/openpgp-thunderbird.rst:72
msgid "Select “Change PIN”. This is your User PIN you need for daily work. Enter the current PIN ( “123456” for delivery) and twice your new PIN. For this PIN you can use the characters: a-z A-Z 0-9 / .;;:- !? () [] {}% +. The PIN should be at least 6 characters long. Click “OK”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:83
#: ../pro/openpgp-thunderbird.rst:83
#: ../pro/openpgp-thunderbird.rst:83
msgid "Repeat the procedure for the Admin PIN. “SmartCard → Change PIN”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:90
#: ../pro/openpgp-thunderbird.rst:90
#: ../pro/openpgp-thunderbird.rst:90
msgid "Select Change Admin PIN. This is your Admin PIN that you only rarely need. Enter the current PIN ( “12345678” for delivery) and the new PIN twice. For this PIN, you can use the characters: a-z A-Z 0-9 / .;;:- !? () [] {}% +. The PIN should be at least 8 characters long. Click “OK”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:101
#: ../pro/openpgp-thunderbird.rst:101
#: ../pro/openpgp-thunderbird.rst:101
msgid "You have now changed the PINs and should continue to generate your personal keys."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:104
#: ../pro/openpgp-thunderbird.rst:104
#: ../pro/openpgp-thunderbird.rst:104
msgid "Generation of Keys"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:106
#: ../pro/openpgp-thunderbird.rst:106
#: ../pro/openpgp-thunderbird.rst:106
msgid "To encrypt data and e-mails, a key pair consisting of a public key and a private key, must first be generated. The so-called public key is used to **en**\\ crypt the data or e-mails. You can distribute this to all those with whom you want to communicate securely (for example, publish it publicly on your site). The so-called private key is used to **de**\\ crypt the data or messages. This key should **NEVER** be made known! Usually, you also do not have direct access to it (see below), since this is stored securely on the Nitrokey. Use the Nitrokey to create both keys using the following procedure:"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:109
#: ../pro/openpgp-thunderbird.rst:109
#: ../pro/openpgp-thunderbird.rst:109
msgid "Insert the Nitrokey into a USB port on your computer. StartThunderbird"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:112
#: ../pro/openpgp-thunderbird.rst:112
#: ../pro/openpgp-thunderbird.rst:112
msgid "In Thunderbird, select as shown in the following picture „OpenPGP“ → „Manage Smart Card“"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:115
#: ../pro/openpgp-thunderbird.rst:115
#: ../pro/openpgp-thunderbird.rst:115
msgid "In the “SmartCard details” window, select “SmartCard” → “Generate key”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:118
#: ../pro/openpgp-thunderbird.rst:118
#: ../pro/openpgp-thunderbird.rst:118
msgid "In the following window, select your e-mail address for which you want to generate keys. Verify that the e-mail address specified in “User ID” is correct. You can also specify whether a private key backup copy should be stored on your computer."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:128
#: ../pro/openpgp-thunderbird.rst:128
#: ../pro/openpgp-thunderbird.rst:128
msgid "If you do not create a backup copy, you have no chance to get your encrypted data if the Nitrokey is lost or damaged!"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:136
#: ../pro/openpgp-thunderbird.rst:136
#: ../pro/openpgp-thunderbird.rst:136
msgid "It is recommended to store this safety device. Select “Save key copy of the key outside the Smard Card”. Then enter your personal password for the backup copy under “Passphrase”. This password should not be less than 8 characters, and should contain both uppercase and lowercase letters and numbers. You can also use a long sentence, but avoid known prose or lyric. Also, no name or known term should be used."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:144
#: ../pro/openpgp-thunderbird.rst:144
#: ../pro/openpgp-thunderbird.rst:144
msgid "**Allowed characters**: a-z A-Z 0-9 /.,;:-!?( )%+ (no umlauts ä,ü,ö,Ä,Ü,Ö or ß)"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:146
#: ../pro/openpgp-thunderbird.rst:146
#: ../pro/openpgp-thunderbird.rst:146
msgid "**Poor Password**: qwerty123, ILoveSusi3, Password, If you can dream it, you can do it."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:148
#: ../pro/openpgp-thunderbird.rst:148
#: ../pro/openpgp-thunderbird.rst:148
msgid "**Strong Password**: g(Ak?2Pn7Yn or Ki.stg2bLqzp%d or A dog with greeen Earz and fife legs (spelling errors increase security)"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:150
#: ../pro/openpgp-thunderbird.rst:150
#: ../pro/openpgp-thunderbird.rst:150
msgid "You do **not** need this password for daily work. It is only necessary for the restoration of the secret key, e.g. if you have lost the Nitrokey. Therefore, keep the password in a safe place."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:152
#: ../pro/openpgp-thunderbird.rst:152
#: ../pro/openpgp-thunderbird.rst:152
msgid "You can also specify whether and when the key should be automatically invalid. This means, from this point onwards, no more e-mails can be encrypted with this key and you have to create a new key pair."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:154
#: ../pro/openpgp-thunderbird.rst:154
#: ../pro/openpgp-thunderbird.rst:154
msgid "Finally, click on “Generate key pair”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:161
#: ../pro/openpgp-thunderbird.rst:161
#: ../pro/openpgp-thunderbird.rst:161
msgid "You are now asked if the key should be generated. Confirm with “Yes”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:168
#: ../pro/openpgp-thunderbird.rst:168
#: ../pro/openpgp-thunderbird.rst:168
msgid "In order for the program to write your keys to the stick, you must enter the admin PIN and the user PIN (changed above)."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:176
#: ../pro/openpgp-thunderbird.rst:176
#: ../pro/openpgp-thunderbird.rst:176
msgid "The key generation can take a few minutes. Do not terminate the program prematurely!"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:178
#: ../pro/openpgp-thunderbird.rst:178
#: ../pro/openpgp-thunderbird.rst:178
msgid "When the key generation is complete, you receive the following message. A certificate is now created that allows you to invalidate your key in an emergency. This certificate is automatically saved with your private key. This should be printed out or backed up on at least one other external medium so that you can revoke the validity of the keys if your keys and backups are lost. Click “Yes”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:185
#: ../pro/openpgp-thunderbird.rst:185
#: ../pro/openpgp-thunderbird.rst:185
msgid "You can now select the directory in which the backup copy is stored. This copy is encrypted with your password entered above. This means that no one can read or use the keys without your password. Do not give your password to anyone. This file with the name of your e-mail address and the suffix “.asc” should be backed up on another medium. After selecting the directory, click “Save”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:192
#: ../pro/openpgp-thunderbird.rst:192
#: ../pro/openpgp-thunderbird.rst:192
msgid "Here you must again specify your user PIN or passphrase. Then click “OK”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:200
#: ../pro/openpgp-thunderbird.rst:200
#: ../pro/openpgp-thunderbird.rst:200
msgid "You will now see the message that the certificate was created and saved. Click “OK”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst:208
#: ../pro/openpgp-thunderbird.rst:208
#: ../pro/openpgp-thunderbird.rst:208
msgid "Key generation is now complete. You can now exit the program (File - Close)."
msgstr ""

#: ../pro/openpgp-thunderbird.rst:216
#: ../pro/openpgp-thunderbird.rst:216
#: ../pro/openpgp-thunderbird.rst:216
msgid "Your Nitrokey is personalized and ready to use. **Have fun with the secure email encryption!**"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:2
msgid "OpenVPN Configuration with Easy-RSA"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:11
msgid "This guide is work-in-progress, and will be updated accordinlgy. Please take this status into consideration."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:13
msgid "This guide shows how to configure OpenVPN clients to login using a `Nitrokey Pro 2 <https://shop.nitrokey.com/shop/product/nk-pro-2-nitrokey-pro-2-3>`__ or a `Nitrokey Storage 2 <https://shop.nitrokey.com/de_DE/shop/product/nitrokey-storage-2-56>`__. For software key management we will be using `Easy-RSA <https://github.com/OpenVPN/easy-rsa>`__, a utility that has been evolving alongside OpenVPN."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:17
msgid "To sign the certificates, we will use a `Nitrokey HSM 2 <https://shop.nitrokey.com/shop/product/nk-pro-2-nitrokey-pro-2-3>`__ set up as `Certificate Authority <certificate-authority.html#creating-the-intermediate-certificate-authority>`__, however this guide does not cover the set up of the CA itself (it is clear and `well documented here <certificate-authority.html#sign-a-server-certificate>`__)."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:20
msgid "We will use Easy-RSA, because it seems to provide some flexibility, and allows key management via external PKIs. We will use it on the server to issue the signing request, and repeat the same process on the client. The Certificate Signing Requests will be signed by the CA on the Nitorkey HSM, and re-transmitted to the server and the client."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:24
#: ../pro/smime.rst:9
#: ../pro/smime-thunderbird.rst:9
#: ../pro/smime.rst:9
#: ../pro/smime-outlook.rst:9
#: ../pro/smime-thunderbird.rst:9
#: ../pro/windows/openpgp-csp.rst:11
#: ../pro/windows/openpgp-outlook.rst:14
#: ../pro/smime.rst:9
#: ../pro/smime-outlook.rst:9
#: ../pro/smime-thunderbird.rst:9
msgid "Prerequisites"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:26
msgid "In the following documentation we will require 3 different machines as following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:28
msgid "OpenVPN server (v. 2.5) on Debian 10 (EC2 virtual machine - AWS)"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:30
msgid "OpenVPN client (v. 2.4.9) on Fedora 30 (local machine)"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:32
msgid "The Certificate Authority will be accessible from a standalone machine with Fedora 30 (local machine)"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:35
msgid "To interact with the devices we will require `OpenSC 0.20 <https://github.com/OpenSC/OpenSC/wiki>`__ installed on the client and CA machine (the local machines). You can follow the instructions to set it up in `this link (*Unix) <https://github.com/OpenSC/OpenSC/wiki/Compiling-and-Installing-on-Unix-flavors>`__."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:38
msgid "To download the dependencies on Fedora machines we can this instruction:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:44
msgid "For Debian Linux, more recent OpenSC packages are available `here <https://github.com/Nitrokey/opensc-build>`__."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:46
msgid "We will use the following Nitrokeys for physical key management:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:48
msgid "An authentication key using the `Nitrokey Pro 2 (pdf) <https://www.nitrokey.com/files/doc/Nitrokey_Pro_factsheet.pdf>`__"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:51
msgid "A Certificate Authority (CA) using the `Nitrokey HSM 2 (pdf) <https://www.nitrokey.com/files/doc/Nitrokey_HSM_factsheet.pdf>`__"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:54
msgid "As a reminder, to build a Certificate Authority on Nitrokey HSM 2, you may follow the instructions available `in the documentation <certificate-authority.html#sign-a-server-certificate>`__."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:56
msgid "Alternatively you may set up your own CA on a `on a separate machine <https://www.digitalocean.com/community/tutorials/how-to-set-up-and-configure-a-certificate-authority-ca-on-ubuntu-20-04>`__, or use the OpenVPN tutorial which also relies on `Easy-RSA <https://openvpn.net/community-resources/setting-up-your-own-certificate-authority-ca/>`__. The last 2 options rely on software solutions for key management."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:61
msgid "Server side"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:64
msgid "1. Install OpenVPN"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:66
msgid "First we need to enable IP Forwarding by editing ``/etc/sysctl.conf`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:72
msgid "Uncomment or edit accordingly the following line"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:78
msgid "Close after saving it, and enter this command"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:84
msgid "Once IP forwarding is done, we will need to download the latest release of OpenvPN for our Debian 10 server, according to `these instructions <https://community.openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos>`__:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:86
msgid "Change to root and download the GPG key that signed the package"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:93
msgid "Add the URL of the adequate OpenVPN packages to the ``sources.list`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:100
msgid "We downloaded OpenVPN 2.5 as “password prompt” requires at least OpenVPN `version 2.4.8 <https://community.openvpn.net/openvpn/ticket/1215>`__ to login."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:103
msgid "Next we download OpenVPN"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:109
msgid "If you want to check the version, it possible by calling ``--version`` and print the following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:122
msgid "2. Install Easy-RSA"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:124
msgid "To build the PKI, we will download the latest version of Easy-RSA on the server and client machines. To get the latest release, go to the `Releases page on the official EasyRSA GitHub project <https://github.com/OpenVPN/easy-rsa/releases>`__, copy the download link for the file ending in ``.tgz``, and then paste it into the following command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:126
msgid "Download the latest release"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:133
msgid "Extract the tarball"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:142
msgid "3. Create a PKI for OpenVPN server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:144
msgid "Before you can create your OpenVPN server’s private key and certificate, you need to create a local Public Key Infrastructure directory on your OpenVPN server. You will use this directory to manage the server and clients’ certificate requests, instead of making them directly on your CA server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:146
msgid "To build a PKI directory on your OpenVPN server, you’ll need to populate a file called ``vars`` with some default values."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:148
msgid "Create a ``vars`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:156
msgid "Once the file is opened, paste in the following two lines"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:163
msgid "These are the only two lines that you need in this ``vars`` file on your OpenVPN server since it will not be used as a Certificate Authority. They will ensure that your private keys and certificate requests are configured to use Elliptic Curve Cryptography (ECC) to generate keys, and secure signatures for your clients and OpenVPN server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:165
msgid "In regards to the choice of the cryptographic algorithms, I follow the model in `this tutorial <https://www.digitalocean.com/community/tutorials/how-to-set-up-and-configure-an-openvpn-server-on-centos-8>`__, and you can customize these according to your specific needs."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:167
msgid "Initialize the PKI"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:169
msgid "Once you have populated the ``vars`` file you can proceed with creating the PKI directory. To do so, run the easyrsa script with the init-pki option:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:175
msgid "After you’ve initialized your PKI on the OpenVPN server, you are ready to move on to the next step, which is creating an OpenVPN server certificate request and private key."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:178
msgid "4. Create ``server.req`` and ``server.key``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:180
msgid "Now that your OpenVPN server has all the prerequisites installed, the next step is to generate a key pair composed of a private key (to keep secret), and a Certificate Signing Request (``.csr``) on your OpenVPN server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:182
msgid "In general terms, on systems where we generate a key and request, these files are left unencrypted by using the ``nopass`` argument, since servers usually need to start up without any password input. This generates an *unencrypted key*, so mind *protect its access and file permissions* carefully."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:186
msgid "Configuration notes from OpenVPN:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:188
msgid "The server, and each client, must have their own cert and key file. The server and all clients will use the same CA file."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:190
msgid "Server certificate should have the following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:192
msgid "``keyUsage:  digitalSignature, keyEncipherment``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:194
msgid "``extendedKeyUsage: serverAuth``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:196
msgid "Create the signing request for the server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:198
msgid "Navigate to the ``~/easyrsa`` directory on your OpenVPN Server as your non-root user, and enter the following commands:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:205
msgid "This will create a private key for the server and a certificate request file called ``server.req``."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:207
msgid "Once you have a signed certificate, you’ll transfer it back to the OpenVPN server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:209
msgid "Copy the key to the OpenVPN server directory"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:215
msgid "After completing these steps, you have successfully created a private key for your OpenVPN server. You have also generated a Certificate Signing Request for the OpenVPN server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:219
msgid "File extensions for certificate signing requests"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:221
msgid "The file extension that is adopted by the CA and HSM tutorial indicates the creation of a ``.csr`` file, however Easy-RSA creates certificate signing requests with a ``.req`` extension."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:225
msgid "We will use interchangeably both extensions, while making sure that we transfer the right files to the Certificate Authority, and generate a final certificate with a ``.crt`` extension."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:229
msgid "In the next section of this guide, we will sign a ``.req`` file with our CA on deployed on the HSM 2 device. For this purpose, I will use a dedicated machine to sign the requests."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:232
msgid "5. Sign and retrieve ``server.crt``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:234
msgid "The following instructions require the transfer of the ``server.req`` (or ``server.csr``) file to the CA system."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:237
msgid "The transfer itself is not security sensitive, though it is wise to verify if the received file matches the sender’s copy, if the transport is untrusted."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:239
msgid "In order to go through these steps, I will extensively rely on `these instructions <certificate-authority.html#creating-the-intermediate-certificate-authority>`__, to sign the certificate signing requests, once we generated them with Easy-RSA."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:242
msgid "5.1. Sign the ``server.req`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:244
msgid "On the local machine dedicated to access the HSM, we will use the tools provided by Opensc 0.20 in order to sign the ``.req`` file, and send it back to the OpenVPN server. We assume we have transferred the file from the server machine to the CA machine."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:246
msgid "First we start by plugging the HSM Nitrokey, and enter this instruction for listing the keys available."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:248
msgid "Query the list of available devices"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:256
msgid "The key’s URI should be in this format:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:262
msgid "Create ``openvpn/`` directory under ``certificate-authority/``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:269
msgid "Sign the ``server.req``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:276
msgid "5.2. Retrieve the ``server.crt`` file to the server machine"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:278
msgid "Transfer the signed certificates to the server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:280
msgid "From the CA machine, copy the files ``server.crt`` and ``chain.crt`` to the OpenVPN server. In this example we will use the ``scp`` command as following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:286
msgid "Place the certificates on the server’s directory"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:294
msgid "CA Certificate and ``chain.crt``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:296
msgid "In the above, the CA returns the signed sever certificate, and includes the CA certificate ``CA.crt`` which is the ``chain.crt`` file. This can be done over an insecure channel, though the client is encouraged to confirm if the received ``chain.crt`` is valid, if the transport is untrusted."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:302
msgid "It is possible to rename the file ``chain.crt`` file to ``CA.crt`` on the target machine, however we will use ``chain.crt`` in the next instructions."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:307
msgid "6. Configure the OpenVPN server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:309
msgid "A connection that uses TLS requires multiple `certificates and keys for authentication <https://wiki.teltonika-networks.com/view/OpenVPN_configuration_examples>`__. Now that we issued and signed those, we can place them in the right directories. The breakdown of the certificates and keys that must be located at the root directory are the following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:320
msgid "On your OpenVPN server, now you can create the configuration file ``server.conf`` with your favorite text editor. The file can be configured according to your needs, while we make sure to change the server certificate and key sections according the names you chose for the your the files we signed:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:329
msgid "Here is the configuration file we can use for testing these instructions:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:359
msgid "To test if the configuration functions properly, we can use this command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:366
msgid "7. Start the OpenVPN service on the server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:368
msgid "Enable the OpenVPN service by adding it to systemctl, and start it using these commands:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:375
msgid "To Double check if the OpenVPN service is active use this command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:381
msgid "The OpenVPN should be running at this point."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:386
msgid "Client side configuration"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:400
msgid "1. Install OpenVPN and Easy-RSA"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:402
msgid "Install the software"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:404
msgid "We can use directly ``dnf install`` to install OpenVPN 2.4.9 and Easy-RSA 3.0.7"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:410
msgid "Then we create as non-root a directory for Easy RSA called ``Easy-RSA``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:416
msgid "And link it to the Easy RSA package we just installed"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:423
msgid "2. Create a PKI for the OpenVPN client"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:425
msgid "In the same manner we created a PKI on the OpenVPN server, we will create a PKI using Easy-RSA on the client side."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:428
msgid "3. Create a ``client.req`` and ``client.key``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:430
msgid "In the same manner we issued the key pair on the sever, we generate a key pair for the client which will be composed of the ``client.req`` file and the ``client.key`` file. The latter must be kept secret on the client machine."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:434
msgid "4. Sign ``client.req`` and issue the ``client.crt`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:436
msgid "To transfer the ``client.req`` file to the CA machine, we will use the same method as we did for the ``server.req`` file."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:438
msgid "Once transferred, on the CA machine we sign the certificate signing request file with this command"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:445
msgid "5. Import ``client.crt`` on the Nitrokey from the CA machine"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:447
msgid "After creating the ``client.crt`` file, we plug the Nitrokey Pro 2 device in the CA machine, and import the ``.crt`` to the Pro 2 device using this command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:453
msgid "You can see if the key is effectively stored on the Nitrokey using this command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:459
msgid "Or alternatively"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:465
msgid "Fore more commands you can refer to the `OpenSC wiki <https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`__."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:468
msgid "6. Retrieve the ``chain.crt`` file from the CA machine"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:470
msgid "While we keep the ``client.crt``\\ stored on the nitrokey Pro 2 device, we must retrieve the ``chain.crt`` file on the client machine, and store it in the adequate directory. We may use ``scp`` as in the method explained in the server section of this guide."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:473
msgid "7. Configure the client to interact with the Nitrokey"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:475
msgid "Now back on the client machine, we will plug the Nitrokey Pro and use it to establish the VPN connection with the server. In general terms, a connection that uses TLS requires multiple certificates and keys for authentication:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:484
msgid "For this guide we can the following ``client.conf`` file, and add the required options to it accordingly:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:506
msgid "Determine the correct object"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:508
msgid "Each PKCS#11 provider can support multiple devices. In order to view the available object list you can use the following command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:524
msgid "Each certificate/private key pair have unique ``Serialized id`` string. The serialized id string of the requested certificate should be specified, in the configuration file. We can do this by adding the ``pkcs11-id`` option using single quote marks."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:530
msgid "Add retrieved Serialized ID to the configuration file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:532
msgid "Using your favorite text editor, open the server.conf file, and add the following lines, while taking care to insert your own ``Serialized id``:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:539
msgid "For additional `settings related to OpenVPN <https://openvpn.net/community-resources/how-to/>`__ authentication, you may also add few lines to handle key maganagement, although it is optional."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:543
#: ../pro/linux/openvpn-easyrsa.rst:567
msgid "Click to view the code"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:560
msgid "Optional step"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:563
msgid "If you need to test the configuration, with and without the token on the Nitrokey, you may add lines to the same ``client.conf`` and comment/uncomment the relevant lines according to your needs:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:577
msgid "Configure the OpenVPN client"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:579
msgid "The final configuration file ``client.conf`` should look like this one:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:622
msgid "Known issues"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:624
msgid "There are some known issues related to OpenVPN login with OpenSC. Please consult these issues `here <https://github.com/Nitrokey/wiki/wiki/3rd-Party-Issues>`__."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:627
msgid "8. Start the OpenVPN client"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:629
msgid "Start the OpenVPN service on the client"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:631
msgid "Enable the OpenVPN service, and start it using these commands:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:638
msgid "To double check if the OpenVPN service is active use this command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:644
msgid "Enter your User PIN"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:646
msgid "When executing OpenVPN client, Nitrokey’s PIN needs to be entered:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:656
msgid "Unfortunately OpenVPN doesn’t seem to be able to establish a handshake and stops at an error as reported `here <https://support.nitrokey.com/t/nitrokey-pro-with-openssl-1-1-1-tls-1-3-and-rsa-based-certificates/2180/2>`__, `here <https://support.nitrokey.com/t/openvpn-openssl-error-141f0006/2637>`__ and `here <https://community.openvpn.net/openvpn/ticket/1215>`__"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:660
msgid "error output"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:662
msgid "``$ sudo openvpn --client --config client.conf`` ``Fri Sep 11 17:42:01 2020 OpenVPN 2.4.9 x86_64-redhat-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on Apr 24 2020`` ``Fri Sep 11 17:42:01 2020 library versions: OpenSSL 1.1.1g FIPS  21 Apr 2020, LZO 2.08`` ``Fri Sep 11 17:42:01 2020 PKCS#11: Adding PKCS#11 provider '/usr/lib64/pkcs11/opensc-pkcs11.so'`` ``Enter User PIN (OpenPGP card) token Password: ******`` ``Fri Sep 11 17:42:12 2020 TCP/UDP: Preserving recently used remote address: [AF_INET]18.157.180.240:1194`` ``Fri Sep 11 17:42:12 2020 Socket Buffers: R=[212992->212992] S=[212992->212992]`` ``Fri Sep 11 17:42:12 2020 UDP link local: (not bound)`` ``Fri Sep 11 17:42:12 2020 UDP link remote: [AF_INET]18.157.180.240:1194`` ``Fri Sep 11 17:42:12 2020 NOTE: UID/GID downgrade will be delayed because of --client, --pull, or --up-delay`` ``Fri Sep 11 17:42:12 2020 TLS: Initial packet from [AF_INET]18.157.180.240:1194, sid=d79690cf 9e38ce89`` ``Fri Sep 11 17:42:12 2020 VERIFY OK: depth=1, CN=server_CA`` ``Fri Sep 11 17:42:12 2020 VERIFY KU OK`` ``Fri Sep 11 17:42:12 2020 Validating certificate extended key usage`` ``Fri Sep 11 17:42:12 2020 ++ Certificate has EKU (str) TLS Web Server Authentication, expects TLS Web Server Authentication`` ``Fri Sep 11 17:42:12 2020 VERIFY EKU OK`` ``Fri Sep 11 17:42:12 2020 VERIFY OK: depth=0, CN=server`` ``Fri Sep 11 17:42:12 2020 OpenSSL: error:141F0006:SSL routines:tls_construct_cert_verify:EVP lib`` ``Fri Sep 11 17:42:12 2020 TLS_ERROR: BIO read tls_read_plaintext error`` ``Fri Sep 11 17:42:12 2020 TLS Error: TLS object -> incoming plaintext read error`` ``Fri Sep 11 17:42:12 2020 TLS Error: TLS handshake failed`` ``Fri Sep 11 17:42:12 2020 SIGUSR1[soft,tls-error] received, process restarting`` ``Fri Sep 11 17:42:12 2020 Restart pause, 5 second(s)``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:686
msgid "In some reported cases it does not prompt for a PIN on the terminal. One workaround would be to use to use this command to login with the PIN:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:692
msgid "Alternatively, you could `recompile OpenVPN <https://forums.openvpn.net/viewtopic.php?f=4&t=23318>`__ client with systemd support disabled, and it will prompt you for the PIN as expected."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:694
msgid "Another option, would be to login to your OpenVPN instance with the Viscosity client which provides a better user experience especially for entering the PIN."
msgstr ""

#: ../pro/otp.rst:2
#: ../pro/otp.rst:2
#: ../pro/otp.rst:2
msgid "Two-factor Authentication with One-Time Passwords (OTP)"
msgstr ""

#: ../pro/otp.rst:8
#: ../pro/otp.rst:8
#: ../pro/otp.rst:8
msgid "The use of One-time Passwords (OTP) is called very differently on the various services supporting it. Sometimes it is referred to as Multi-factor Authentication (MFA), sometimes it is Two-factor Authentication (2FA) or just “authentication via authenticator app” like Google Authenticator. Most of these services are compatible for usage with the Nitrokey Pro and Nitrokey Storage. The following instructions show how to enable OTP on our `support forum <https://support.nitrokey.com/>`__. The procedure is quite similar on most services. For a list of websites supporting OTP have a look at `dongleauth.com <https://www.dongleauth.com/>`__."
msgstr ""

#: ../pro/otp.rst:10
#: ../pro/otp.rst:10
#: ../pro/otp.rst:10
msgid "You need to have the `Nitrokey App <https://www.nitrokey.com/download>`__ installed to use the OTP feature of the Nitrokey Pro and Nitrokey Storage."
msgstr ""

#: ../pro/otp.rst:13
#: ../pro/otp.rst:13
#: ../pro/otp.rst:13
msgid "Configure a Website/Application to Use OTP"
msgstr ""

#: ../pro/otp.rst:15
#: ../pro/otp.rst:15
#: ../pro/otp.rst:15
msgid "Login to the website which supports OTP (in this example, the `support forum <https://support.nitrokey.com/>`__). Usually you find the option to enable two-factor-authentication under your profile or in the settings."
msgstr ""

#: ../pro/otp.rst:22
#: ../pro/otp.rst:22
#: ../pro/otp.rst:22
msgid "Most of the time, you will get a QR-Code as seen below. There should be an option, to show the secret key directly."
msgstr ""

#: ../pro/otp.rst:29
#: ../pro/otp.rst:29
#: ../pro/otp.rst:29
msgid "We need to copy the secret code."
msgstr ""

#: ../pro/otp.rst:31
#: ../pro/otp.rst:31
#: ../pro/otp.rst:31
msgid "This is what the Nitrokey is actually protecting. You may create a backup of it now (in case the Nitrokey get lost or breaks) by writing it down on a sheet of paper and storing it securely. But be aware that anybody who is in possession of this secret code, can create one-time passwords for your account! *Please note that you won’t be able to backup this code, once it is stored in the Nitrokey!*"
msgstr ""

#: ../pro/otp.rst:38
#: ../pro/otp.rst:38
#: ../pro/otp.rst:38
msgid "Now start the Nitrokey App and open the “OTP Slot Configuration”."
msgstr ""

#: ../pro/otp.rst:45
#: ../pro/otp.rst:45
#: ../pro/otp.rst:45
msgid "Paste in the secret key in the corresponding field and choose an appropiate slot name. Click on “Save” and type in your admin PIN if requested."
msgstr ""

#: ../pro/otp.rst:52
#: ../pro/otp.rst:52
#: ../pro/otp.rst:52
msgid "After saving the slot you can go to “Menu” -> “Passwords” -> YourSlotName to get your very first one-time password."
msgstr ""

#: ../pro/otp.rst:60
#: ../pro/otp.rst:60
#: ../pro/otp.rst:60
msgid "The one-time password is copied to your clipboard automatically. You just need to paste it to the field on the website to confirm the correct setup and thus to activate the two-factor authentication."
msgstr ""

#: ../pro/otp.rst:68
#: ../pro/otp.rst:68
#: ../pro/otp.rst:68
msgid "Securely Login to Website/Application"
msgstr ""

#: ../pro/otp.rst:70
#: ../pro/otp.rst:70
#: ../pro/otp.rst:70
msgid "From now on you will get asked for a one-time password additionally to your other credentials if you try to login the the website. You just need to open the Nitrokey App and go to “Menu” -> “Passwords” -> YourSlotName again to get the one-time password."
msgstr ""

#: ../pro/putty.rst:2
#: ../pro/putty.rst:2
#: ../pro/putty.rst:2
msgid "PuTTY"
msgstr ""

#: ../pro/putty.rst:8
#: ../pro/putty.rst:8
#: ../pro/putty.rst:8
msgid "This mini-howto assumes that the Nitrokey has been initialized and contains cryptographic keys."
msgstr ""

#: ../pro/putty.rst:10
#: ../pro/putty.rst:10
#: ../pro/putty.rst:10
msgid "**Required on the client side:**"
msgstr ""

#: ../pro/putty.rst:12
#: ../pro/putty.rst:12
#: ../pro/putty.rst:12
msgid "`PuTTY <https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html>`__ or a variant of it"
msgstr ""

#: ../pro/putty.rst:15
#: ../pro/putty.rst:15
#: ../pro/putty.rst:15
msgid "`GPG4Win <https://gpg4win.org/>`__ or `pageant.exe <https://smartcard-auth.de/download-de.html>`__ with Smartcard support from Dr. Peter Koch"
msgstr ""

#: ../pro/putty.rst:19
#: ../pro/putty.rst:19
#: ../pro/putty.rst:19
msgid "Optional: `OpenPGP Minidriver <https://wald.intevation.org/frs/?group_id=49&release_id=353>`__"
msgstr ""

#: ../pro/putty.rst:22
#: ../pro/putty.rst:22
#: ../pro/putty.rst:22
msgid "**1) Pageant**"
msgstr ""

#: ../pro/putty.rst:24
#: ../pro/putty.rst:24
#: ../pro/putty.rst:24
msgid "start pageant.exe. That this is running is shown in the notification area of the taskbar."
msgstr ""

#: ../pro/putty.rst:31
#: ../pro/putty.rst:31
#: ../pro/putty.rst:31
msgid "A double click opens the view of the current keys."
msgstr ""

#: ../pro/putty.rst:38
#: ../pro/putty.rst:38
#: ../pro/putty.rst:38
msgid "After inserting the key it looks like this."
msgstr ""

#: ../pro/putty.rst:45
#: ../pro/putty.rst:45
#: ../pro/putty.rst:45
msgid "If nothing is displayed here, pageant may have to be restarted or another application is already using the stick. A possibly running pgp-agent must be terminated! Now we only need the public key we want to store in the ssh configuration of the server. Therefore we press CTRL while inserting the stick…"
msgstr ""

#: ../pro/putty.rst:52
#: ../pro/putty.rst:52
#: ../pro/putty.rst:52
msgid "and then view the Pageant-PublicKeys.txt."
msgstr ""

#: ../pro/putty.rst:59
#: ../pro/putty.rst:59
#: ../pro/putty.rst:59
msgid "I searched for the ssh-rsa entry of the auth key and added the line on the server to the authorized_keys."
msgstr ""

#: ../pro/putty.rst:61
#: ../pro/putty.rst:61
#: ../pro/putty.rst:61
msgid "**2) PuTTY**"
msgstr ""

#: ../pro/putty.rst:63
#: ../pro/putty.rst:63
#: ../pro/putty.rst:63
msgid "There is surprisingly little to say about PuTTY itself."
msgstr ""

#: ../pro/putty.rst:70
#: ../pro/putty.rst:70
#: ../pro/putty.rst:70
msgid "“Attempt authentication using Pageant” must be set, which is the default anyway."
msgstr ""

#: ../pro/putty.rst:72
#: ../pro/putty.rst:72
#: ../pro/putty.rst:72
msgid "That’s it, as soon as you connect to the server while pageant is running and you have the keys, you will be asked for the password of the Crypto-Stick and can log in."
msgstr ""

#: ../pro/putty.rst:74
#: ../pro/putty.rst:74
#: ../pro/putty.rst:74
msgid "**3) openpgp-minidriver (optional)**"
msgstr ""

#: ../pro/putty.rst:76
#: ../pro/putty.rst:76
#: ../pro/putty.rst:76
msgid "If you are annoyed that Windows reports every time you plug in the stick that no driver could be found for “Smartcard”, you can get rid of it. You just have to install the x86 or x64 version of the above mentioned driver and the smartcard looks like this:"
msgstr ""

#: ../pro/smime.rst:2
#: ../pro/smime.rst:2
#: ../pro/smime.rst:2
msgid "S/MIME Email Encryption"
msgstr ""

#: ../pro/smime.rst:17
#: ../pro/smime.rst:17
#: ../pro/smime.rst:17
msgid "If you are in doubt which one to choose, you should use OpenPGP, see `here <openpgp.html>`__. This page describes the usage of S/MIME email encryption."
msgstr ""

#: ../pro/smime.rst:19
#: ../pro/smime.rst:19
#: ../pro/smime.rst:19
msgid "You need to purchase a S/MIME certificate or may already got one by your company. Furthermore, you need to install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__ on your System. While GNU/Linux users usually can install OpenSC over the package manager (e.g. ``sudo apt install opensc`` on Ubuntu), macOS and Windows users can download the installation files from the `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__ page."
msgstr ""

#: ../pro/smime.rst:22
#: ../pro/smime-thunderbird.rst:17
#: ../pro/smime.rst:22
#: ../pro/smime-outlook.rst:17
#: ../pro/smime-thunderbird.rst:17
#: ../pro/smime.rst:22
#: ../pro/smime-outlook.rst:17
#: ../pro/smime-thunderbird.rst:17
msgid "Windows users with 64-bit system (standard) need to install both, the 32-bit and the 64-bit version of OpenSC!"
msgstr ""

#: ../pro/smime.rst:25
#: ../pro/smime.rst:25
#: ../pro/smime.rst:25
msgid "Import Existing Key and Certificate"
msgstr ""

#: ../pro/smime.rst:27
#: ../pro/smime.rst:27
#: ../pro/smime.rst:27
msgid "The following instructions are based on the `wiki of OpenSC <https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`__. We will assume, that you already got a key-certificate pair as a .p12 file. Please have a look at the wiki page, if you got a separate key and certificate file."
msgstr ""

#: ../pro/smime.rst:31
#: ../pro/smime.rst:31
#: ../pro/smime.rst:31
msgid "To make these commands as simple as possible, the .p12 file needs to be in your home folder. On Windows this is usually ‘C:\\Users\\yourusername’ and on macOS and GNU/Linux system it will be ‘/home/yourusername’. If you do not store the .p12 file there, you have to adapt the path in the commands below. Please plug in the Nitrokey before submitting the commands."
msgstr ""

#: ../pro/smime.rst:33
#: ../pro/smime.rst:33
#: ../pro/smime.rst:33
msgid "Assuming that your key-certificate file reads ‘myprivate.p12’ the commands for Windows looks like this:"
msgstr ""

#: ../pro/smime.rst:40
#: ../pro/smime.rst:40
#: ../pro/smime.rst:40
msgid "and on macOS and GNU/Linux it will be"
msgstr ""

#: ../pro/smime.rst:47
#: ../pro/smime.rst:47
#: ../pro/smime.rst:47
msgid "The two commands copy the key-certificate pair to the slot 2 (needed for decrypting emails) and slot 3 (needed for signing). The output looks on both systems something like this:"
msgstr ""

#: ../pro/smime.rst:54
#: ../pro/smime.rst:54
#: ../pro/smime.rst:54
msgid "Please note that there will be error messages that can be safely ignored (see output example above). You now have the key-certificate pair loaded on the Nitrokey."
msgstr ""

#: ../pro/smime.rst:61
#: ../pro/smime.rst:61
#: ../pro/smime.rst:61
msgid "for using `S/MIME encryption on Thunderbird <smime-thunderbird.html>`__"
msgstr ""

#: ../pro/smime.rst:64
#: ../pro/smime.rst:64
#: ../pro/smime.rst:64
msgid "for using `S/MIME encryption on Outlook <smime-outlook.html>`__"
msgstr ""

#: ../pro/smime.rst:74
#: ../pro/smime.rst:74
#: ../pro/smime.rst:74
msgid "On Windows: Did you install **both**, the 32-bit and the 64-bit version of OpenSC?"
msgstr ""

#: ../pro/smime.rst:77
#: ../pro/smime.rst:77
#: ../pro/smime.rst:77
msgid "Nitrokey Storage 2: You need to install OpenSC in version 0.18 or higher. You can find the files on the `OpenSC website <https://github.com/OpenSC/OpenSC/releases>`__ for Windows and macOS user or `here <https://github.com/Nitrokey/opensc-build>`__ for Debian/Ubuntu users."
msgstr ""

#: ../pro/smime-thunderbird.rst:2
#: ../pro/smime-thunderbird.rst:2
#: ../pro/smime-thunderbird.rst:2
msgid "S/MIME Email Encryption with Thunderbird"
msgstr ""

#: ../pro/smime-thunderbird.rst:11
#: ../pro/smime-thunderbird.rst:11
#: ../pro/smime-thunderbird.rst:11
msgid "If you do not have a S/MIME key-certificate pair installed on your Nitrokey yet or if you did not installed OpenSC, please look at `this page <smime.html>`__ first."
msgstr ""

#: ../pro/smime-thunderbird.rst:13
#: ../pro/smime-thunderbird.rst:13
#: ../pro/smime-thunderbird.rst:13
msgid "You need to have `OpenSC installed <https://github.com/OpenSC/OpenSC/wiki>`__ on your System. While GNU/Linux users usually can install OpenSC over the package manager (e.g. ``sudo apt update && sudo apt install opensc`` on Ubuntu), macOS and Windows users can download the installation files from OpenSC directly."
msgstr ""

#: ../pro/smime-thunderbird.rst:21
#: ../pro/smime-thunderbird.rst:21
#: ../pro/smime-thunderbird.rst:21
msgid "Settings in Thunderbird"
msgstr ""

#: ../pro/smime-thunderbird.rst:23
#: ../pro/smime-thunderbird.rst:23
#: ../pro/smime-thunderbird.rst:23
msgid "Before you can use the Nitrokey in Thunderbird you have to activate S/MIME encryption in the account settings. You can achieve this by clicking on the menu and go to ‘Preferences’ -> ‘Account Settings’ and clicking on ‘Security’ in the account settings window."
msgstr ""

#: ../pro/smime-thunderbird.rst:30
#: ../pro/smime-thunderbird.rst:30
#: ../pro/smime-thunderbird.rst:30
msgid "Click on “Security Devices” to import the right PCKS11 module. Click on “Load” on the right-hand side. Now give the Module a name (like “OpenSC Module”) and click on “Browse” to choose the location of the Module (see below)."
msgstr ""

#: ../pro/smime-thunderbird.rst:37
#: ../pro/smime-thunderbird.rst:37
#: ../pro/smime-thunderbird.rst:37
msgid "On Windows the right file lays under “C:\\Windows\\System32\\opensc-pkcs11.dll”. On macOS and GNU/Linux the file should be in “/lib/pkcs11/opensc-pkcs11.so” or “/usr/lib/pkcs11/opensc-pkcs11.so” or alike. Press “OK” twice and you are back in security section of the account settings. Now you can actually choose a certificate on the upper part of the window. You should get asked for a PIN to unlock your Nitrokey. Please type in your User PIN."
msgstr ""

#: ../pro/smime-thunderbird.rst:47
#: ../pro/smime-thunderbird.rst:47
#: ../pro/smime-thunderbird.rst:47
msgid "When composing an email you can now choose to encrypt and sign the message."
msgstr ""

#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
#: ../storage/mac/product_platform_heading.rst:3
msgid "(Nitrokey Storage 2 - macOS)"
msgstr ""

#: ../pro/eidauthenticate.rst:2
#: ../pro/eidauthenticate.rst:2
msgid "Login With EIDAuthenticate on Stand Alone Windows Computers"
msgstr ""

#: ../pro/eidauthenticate.rst:8
#: ../pro/eidauthenticate.rst:8
msgid "Download and install the latest version of `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__. Please install the `OpenPGP-CSP <https://github.com/vletoux/OpenPGP-CSP/releases/tag/1.3>`__ driver **instead** if using Nitrokey Storage 2 or Nitrokey Pro 2."
msgstr ""

#: ../pro/eidauthenticate.rst:9
#: ../pro/eidauthenticate.rst:9
msgid "Download and install `EIDAuthenticate <https://www.mysmartlogon.com/eidauthenticate/>`__."
msgstr ""

#: ../pro/eidauthenticate.rst:12
#: ../pro/eidauthenticate.rst:12
msgid "The free community edition is disabled. You may test the enterprise edition instead."
msgstr ""

#: ../pro/eidauthenticate.rst:14
#: ../pro/eidauthenticate.rst:14
msgid "Start EIDConfigurationWizard.exe"
msgstr ""

#: ../pro/eidauthenticate.rst:15
#: ../pro/eidauthenticate.rst:15
msgid "Select “Associate a new certificate”"
msgstr ""

#: ../pro/eidauthenticate.rst:22
#: ../pro/eidauthenticate.rst:22
msgid "Select or generate a Certificate Authority which should issue the user’s certificate on the Nitrokey."
msgstr ""

#: ../pro/eidauthenticate.rst:30
#: ../pro/eidauthenticate.rst:30
msgid "Enter the user PIN which you defined previously in step 4. Wait a moment until a new keypair and certificate are generated. In case your Nitrokey is not detected you may want to execute “certutil -scinfo” for troubleshooting."
msgstr ""

#: ../pro/eidauthenticate.rst:40
#: ../pro/eidauthenticate.rst:40
msgid "Select the newly generated certificate and press continue."
msgstr ""

#: ../pro/eidauthenticate.rst:47
#: ../pro/eidauthenticate.rst:47
msgid "All checks should succeed. Press continue."
msgstr ""

#: ../pro/eidauthenticate.rst:54
#: ../pro/eidauthenticate.rst:54
msgid "Enter the password of your user account."
msgstr ""

#: ../pro/eidauthenticate.rst:61
#: ../pro/eidauthenticate.rst:61
msgid "Enter the user PIN which you defined previously in step 4."
msgstr ""

#: ../pro/eidauthenticate.rst:68
#: ../pro/eidauthenticate.rst:68
msgid "The final screen may look like this."
msgstr ""

#: ../pro/eidauthenticate.rst:75
#: ../pro/eidauthenticate.rst:75
msgid "You may perform further configurations such as activate the force smart card policy or automatically lock the computer when removing the Nitrokey (by using EIDConfigurationWizardElevated.exe)."
msgstr ""

#: ../pro/eidauthenticate.rst:77
#: ../pro/smart-policy.rst:95
#: ../pro/eidauthenticate.rst:77
#: ../pro/smart-policy.rst:95
msgid "From now on, when logging on to your Windows computer you need to connect the Nitrokey and enter your PIN."
msgstr ""

#: ../storage/windows/firmware-update.rst:14
#: ../storage/windows/firmware-update.rst:14
msgid "Download the `Nitrokey App <https://www.nitrokey.com/download>`__ and the `Nitrokey Update Tool <https://github.com/Nitrokey/nitrokey-update-tool/releases/latest>`__. The Nitrokey Update Tool is currently available for macOS and Windows only."
msgstr ""

#: ../storage/windows/firmware-update.rst:16
#: ../storage/windows/firmware-update.rst:16
msgid "Download the latest firmware \".hex\" file from `here <https://github.com/Nitrokey/nitrokey-storage-firmware/releases/download/V0.56/nitrokey-storage-V0.56.hex>`__. Older releases are `here <https://github.com/Nitrokey/nitrokey-storage-firmware/releases>`__."
msgstr ""

#: ../storage/windows/firmware-update.rst:31
#: ../storage/windows/firmware-update.rst:31
msgid "If you are using Microsoft Windows Build 1809 and Nitrokey Storage Firmware 0.52 or lower, you need to use another system or if this is not feasible use `these instructions <firmware-update-manually.html>`__ to enable the Firmware Update mode."
msgstr ""

#: ../storage/windows/firmware-update.rst:37
#: ../storage/windows/firmware-update.rst:37
msgid "Start the Nitrokey Update Tool and click “Select firmware file”. Select the previously downloaded firmware \".hex\" file. Click on “Update firmware” to start the update process. Your device should get detected by the Nitrokey App again as soon as the update is finished."
msgstr ""

#: ../storage/mac/index.rst:2
msgid "Nitrokey Storage, Mac"
msgstr ""

#: ../storage/mac/index.rst:13
msgid "Important: Once you plug in the Nitrokey, your computer will start the Keyboard Setup Assistant. **Don’t run through this assistant but exit it right away.**"
msgstr ""

#: ../storage/mac/index.rst:16
msgid "Download and start the `Nitrokey App <https://www.nitrokey.com/download>`__. Perhaps you want to store it on the unencrypted partition of your Nitrokey Storage"
msgstr ""

#: ../storage/mac/index.rst:33
msgid "For some Versions of MacOS it is necessary to install custom `ccid driver <https://github.com/martinpaljak/osx-ccid-installer>`__ (for information see `here <https://ludovicrousseau.blogspot.com/2016/04/os-x-el-capitan-and-ccid-driver-upgrades.html>`__), but in general MacOS should have the driver onboard."
msgstr ""

#: ../pro/smart-policy.rst:2
#: ../pro/smart-policy.rst:2
msgid "Login to Windows Domain Computers With MS Active Directory"
msgstr ""

#: ../pro/smart-policy.rst:8
#: ../pro/smart-policy.rst:8
msgid "Download and install the latest `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../pro/smart-policy.rst:10
#: ../pro/smart-policy.rst:10
msgid "Use a text editor to add the following settings to *C:\\Program Files:\\OpenSC Project\\OpenSC\\opensc.conf*."
msgstr ""

#: ../pro/smart-policy.rst:49
#: ../pro/smart-policy.rst:49
msgid "Open a command terminal and enter “regedit”. Use regedit to import `this file <https://www.nitrokey.com/sites/default/files/nk-hsm.reg>`__."
msgstr ""

#: ../pro/smart-policy.rst:52
#: ../pro/smart-policy.rst:52
msgid "Now you can enroll Nitrokeys for your users managed in Microsoft Active Directory. You may either use Microsoft PKI, `gpgsm <https://www.gnupg.org/documentation/manuals/gnupg/Howto-Create-a-Server-Cert.html>`__, or `Smart Policy <https://www.mysmartlogon.com/products/smart-policy.html>`__. The following steps describe the usage of Smart Policy."
msgstr ""

#: ../pro/smart-policy.rst:58
#: ../pro/smart-policy.rst:58
msgid "`Download <http://download.mysmartlogon.com/SmartPolicyv2/SmartPolicy%20-%20Stage%203.exe>`__ and install Smart Policy."
msgstr ""

#: ../pro/smart-policy.rst:60
#: ../pro/smart-policy.rst:60
msgid "Select “Read a smart card”"
msgstr ""

#: ../pro/smart-policy.rst:67
#: ../pro/smart-policy.rst:67
msgid "Select the certificate, mapping, and user."
msgstr ""

#: ../pro/smart-policy.rst:74
#: ../pro/smart-policy.rst:74
msgid "Verify the device status via CRL."
msgstr ""

#: ../pro/smart-policy.rst:81
#: ../pro/smart-policy.rst:81
msgid "Choose a Group Policy Object (GPO)."
msgstr ""

#: ../pro/smart-policy.rst:88
#: ../pro/smart-policy.rst:88
msgid "Confirm applying the mapping."
msgstr ""

#: ../pro/smime-outlook.rst:2
#: ../pro/smime-outlook.rst:2
msgid "S/MIME Email Encryption with Outlook"
msgstr ""

#: ../pro/smime-outlook.rst:11
#: ../pro/smime-outlook.rst:11
msgid "If you do not have a S/MIME key-certificate pair installed on your Nitrokey yet, please look at `this page <smime.html>`__ first."
msgstr ""

#: ../pro/smime-outlook.rst:13
#: ../pro/smime-outlook.rst:13
msgid "You need to have OpenSC installed on your System. Please have a look at the `wiki page of the OpenSC project <https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../pro/smime-outlook.rst:21
#: ../pro/smime-outlook.rst:21
msgid "Settings in Outlook"
msgstr ""

#: ../pro/smime-outlook.rst:23
#: ../pro/smime-outlook.rst:23
msgid "Before you can use the Nitrokey in Outlook you have to activate S/MIME encryption. You can achieve this by clicking on to ‘Start’ -> ‘Options’ and clicking on ‘Trust Center’ in the options window. In section ‘Email Security’ you can choose your S/MIME identity. Your certificate should already be recognized by Outlook."
msgstr ""

#: ../pro/smime-outlook.rst:38
#: ../pro/smime-outlook.rst:38
msgid "When composing a mail you can now choose to encrypt and sign the message in the ‘Options’ ribbon of the compose window."
msgstr ""

#: ../pro/smime-outlook.rst:45
#: ../pro/smime-outlook.rst:45
msgid "Outlook will only encrypt message to mail addresses which are saved in your address book. So make sure, that the persons you want to write an encrypted mail to have an entry in Outlook’s contacts. You can ask the person to write you a signed mail, so that you can import the certificate information."
msgstr ""

#: ../pro/smime-outlook.rst:47
#: ../pro/smime-outlook.rst:47
msgid "Depending on your certificate or the certificate of your partners you may have to import a so-called root certificate. This is the certificate of the party which issued the certificate you or your partner uses. You should usually got informed if this is necessary."
msgstr ""

#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
#: ../storage/windows/product_platform_heading.rst:3
msgid "(Nitrokey Storage 2 - Windows)"
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:2
msgid "Two-factor Authentication for Microsoft Account"
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:8
msgid "These are the basic steps for registering the Nitrokey Pro or Nitrokey Storage as a second factor of a Microsoft account."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:10
msgid "Visit https://account.live.com/proofs/Manage/additional and log in to your Microsoft account if prompted."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:22
msgid "Click on “Set up two-step verification”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:29
msgid "Click on “Next”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:36
msgid "Now it is important to click on “set up a different Authenticator app”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:43
msgid "Click on “I can’t scan the bar code”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:50
msgid "Insert and save secret code into the Nitrokey App."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:67
msgid "Enter code generated by Nitrokey App to confirm."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:79
msgid "Click “Next” and then “Finish”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:91
msgid "From now on, when signing in you need an OTP additionally to your password."
msgstr ""

#: ../storage/windows/index.rst:2
msgid "Nitrokey Storage, Windows"
msgstr ""

#: ../storage/windows/index.rst:13
msgid "Connect your Nitrokey to your computer and confirm all dialogs so that the USB smart card device driver gets installed almost automatically."
msgstr ""

#: ../storage/windows/index.rst:19
msgid "Windows Vista, 7, 8 and 10 may fail to install an additional device driver for the smart card. Its safe to ignore this warning."
msgstr ""

#: ../storage/windows/index.rst:22
msgid "Download and start the `Nitrokey App <https://www.nitrokey.com/download>`__. Perhaps you want to store it on the unencrypted partition of your Nitrokey Storage. There won’t open a window, but an icon appears in the system tray (see screenshot below). Please right-click on this icon to use all the options of the App."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:2
msgid "Windows Logon and S/MIME Email Encryption with Active Directory"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:8
msgid "Please note that this driver is still in development/testing. Please tell us your experiences! See our `contact page <https://www.nitrokey.com/contact>`__."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:13
msgid "This guide assumes that an Active Directory server with role ‘Active Directory Certificate Services’ is installed and running on a server. These instructions are based on Nitrokey Storage 2 and Nitrokey Pro 2 only."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:16
msgid "Installing OpenPGP-CSP"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:18
msgid "This step is needed for clients to use the OpenPGP-CSP driver. Download and install the `latest version <https://github.com/vletoux/OpenPGP-CSP/releases/tag/1.3>`__ of the installer file ‘SetupOpenPGPCsp’ for your system architecture, for ‘SetupOpenPGPCsp_x64.msi’ for 64-bit systems."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:20
msgid "You may want to install the driver on the server as well for being able to enforce the use of this driver in the template (see below)."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:23
msgid "Creating Certificate Template on Server Side"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:25
msgid "On Active Directory Server open certsrv.msc to manage your certificate templates. Right click on ‘Certificate Templates’ and choose ‘Manage’"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:32
msgid "Now right click on ‘Smartcard Logon’ template and click ‘Duplicate’, to create a new template on basis of this standard template. Rename template to ‘OpenPGP Card Logon and Email’ or alike."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:39
msgid "Under ‘Request Handling’, you can choose the OpenPGP-CSP as the one and only Cryptography Service Provider (click the Button labeled ‘CSPs…’). For this to work, you need to install the driver on the server as well and you have to insert a Nitrokey beforehand. This is optional. You can let the user choose, which CSP to use."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:51
msgid "For enabling S/MIME email encryption go to ‘Subject name’. Tick the checkbox ‘E-Mail name’ (note: You must save the mail addresses of your users in the corresponding Active Directory field!)."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:58
msgid "Then go to ‘Extensions’, there you edit the applications guideline and add ‘Secure Email’."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:71
msgid "Request Certificate on Client (Domain Member)"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:73
msgid "To request a certificate for a domain member, you have to open certmgr.msc. Right click on folder ‘Personal->Certificates’ and click ’All Tasks->Request New Certificate and choose the template you created on the AD."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:81
msgid "If you did not enforce the usage of OpenPGP-CSP you have to choose it here now."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:93
msgid "Next you choose the Authentication slot for the certificate."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:95
msgid "You are now ready to logon on the computer with the Nitrokey instead of your password and you can use `S/MIME email encryption/signing <smime.html>`__ with the Nitrokey. The driver has to be installed on every computer you want to use the certificate on."
msgstr ""

#: ../pro/windows/openpgp-outlook.rst:2
msgid "OpenPGP Email Encryption with Outlook"
msgstr ""

#: ../pro/windows/openpgp-outlook.rst:10
msgid "Unfortunately, there is no solution to use OpenPGP in Outlook for macOS yet."
msgstr ""

#: ../pro/windows/openpgp-outlook.rst:16
msgid "If you do not have PGP-Keys on your Nitrokey yet, please look at `this page <openpgp.html>`__ first."
msgstr ""

#: ../pro/windows/openpgp-outlook.rst:18
msgid "You need to have GnuPG installed on your System. The newest GnuPG version for Windows can be found `here <https://www.gpg4win.org>`__. You need to make sure to have “GpgOL” checked during installation process (see below)."
msgstr ""

#: ../pro/windows/openpgp-outlook.rst:28
msgid "After installing GPG4Win along with GpgOL, you will see a new icon labeled “Secure” in the composing window. To encrypt and sign a mail you just click on the sign like seen below."
msgstr ""

#: ../pro/windows/openpgp-outlook.rst:35
msgid "GnuPG will start signing and encrypting the mail as soon as you click on ‘send’. You are requested to choose the identity you want to sign with and encrypt for."
msgstr ""

#: ../pro/windows/openpgp-outlook.rst:42
msgid "Furthermore, you are asked for typing in the User PIN of the Nitrokey for signing the mail."
msgstr ""

#: ../pro/windows/openpgp-outlook.rst:49
msgid "You will be asked automatically for your User PIN if you want to read an encrypted mail."
msgstr ""

